use super::token::Token;

use std::{fmt::Display, iter::once};

use nom::{
    branch::alt,
    bytes::complete::{is_a, tag, take_until},
    character::complete::{alpha1, alphanumeric1, anychar, digit1},
    combinator::{flat_map, map, map_res, opt},
    multi::{count, fold_many0, many0, many1, many_till},
    sequence::{delimited, pair, preceded, terminated, tuple},
    IResult,
};
use unicode_normalization::UnicodeNormalization;

pub fn take_symbol(s: &str) -> IResult<&str, Token> {
    map(
        pair(
            alt((
                take_symbol_from_single_char,
                take_symbol_from_ascii_art,
                take_symbol_in_angle_brackets,
                take_string_literal_in_angle_brackets,
                take_string_literal_plain,
            )),
            opt(is_a("'")),
        ),
        |(tex, prime)| Token::Symbol(tex + prime.unwrap_or_default()),
    )(s)
}

////

fn take_symbol_from_single_char(s: &str) -> IResult<&str, String> {
    flat_map(map_res(anychar, tex_of_char), |tex| {
        fold_many0(
            map_res(anychar, tex_of_unicode_accent),
            move || String::from(&tex),
            |tex, accent| format!("{}{{{}}}", accent, tex),
        )
    })(s)
}

fn take_symbol_from_ascii_art(s: &str) -> IResult<&str, String> {
    delimited(
        tag("`"),
        map_res(take_until("`"), tex_of_ascii_art),
        tag("`"),
    )(s)
}

fn take_symbol_in_angle_brackets(s: &str) -> IResult<&str, String> {
    fn take_symbol_from_alpha2(s: &str) -> IResult<&str, String> {
        map_res(alpha1, |x: &str| {
            (x.len() > 1)
                .then_some(tex_of_maybe_abbreviated_symbol_name(x))
                .ok_or(())
        })(s)
    }
    fn take_symbol_from_single_char_in_brackets(s: &str) -> IResult<&str, String> {
        flat_map(
            map_res(anychar, |c| match c {
                '^' => Ok(r"\^".to_string()),
                '_' => Ok(r"\_".to_string()),
                '/' => Ok("/".to_string()),
                _ => tex_of_char(c),
            }),
            |tex| {
                fold_many0(
                    map_res(anychar, tex_of_unicode_accent),
                    move || String::from(&tex),
                    |tex, accent| format!("{}{{{}}}", accent, tex),
                )
            },
        )(s)
    }
    fn take_number_in_brackets(s: &str) -> IResult<&str, String> {
        map(
            tuple((
                digit1,
                opt(map(preceded(tag("."), digit1), |x| format!(".{}", x))),
            )),
            |(integer, decimal): (&str, Option<String>)| {
                format!("{}{}", integer, decimal.unwrap_or_default(),)
            },
        )(s)
    }
    flat_map(
        preceded(
            pair(tag("<"), many0(tag(" "))),
            alt((
                take_symbol_from_alpha2,
                take_symbol_from_ascii_art,
                take_number_in_brackets,
                take_symbol_from_single_char_in_brackets,
            )),
        ),
        |tex| {
            terminated(
                fold_many0(
                    map(
                        alt((
                            preceded(many0(tag(" ")), tag("!")),
                            preceded(many1(tag(" ")), alphanumeric1),
                        )),
                        tex_of_maybe_abbreviated_accent_name,
                    ),
                    move || String::from(&tex),
                    |tex, accent| format!("{}{{{}}}", accent, tex),
                ),
                pair(many0(tag(" ")), tag(">")),
            )
        },
    )(s)
}

fn take_string_literal_plain(s: &str) -> IResult<&str, String> {
    map_res(take_string_literal_content, |c| {
        resolve_string_literal_accent(&c, vec![])
    })(s)
}

fn take_string_literal_in_angle_brackets(s: &str) -> IResult<&str, String> {
    flat_map(
        preceded(
            pair(tag("<"), many0(tag(" "))),
            pair(
                alt((take_string_literal_content, take_raw_string_literal_content)),
                opt(alpha1),
            ),
        ),
        |(content, accent)| {
            terminated(
                map_res(
                    fold_many0(
                        preceded(many1(tag(" ")), alpha1),
                        move || accent.into_iter().collect::<Vec<_>>(),
                        |accents, a| accents.into_iter().chain(once(a)).collect(),
                    ),
                    move |accents| resolve_string_literal_accent(&content, accents),
                ),
                pair(many0(tag(" ")), tag(">")),
            )
        },
    )(s)
}

////

fn tex_of_char(c: char) -> Result<String, ()> {
    fn nfkc(c: char) -> Result<char, ()> {
        once(c).nfkc().next().ok_or(())
    }
    fn raw(c: char) -> String {
        c.to_string()
    }
    fn sym<T: Display>(s: T) -> String {
        format!(r"\{}", s)
    }
    fn cmb<T: Display>(op: &str, arg: T) -> String {
        format!(r"\{}{{ {} }}", op, arg)
    }

    Ok(match c {
        // - ASCII
        '!' | '*' | '+' | ',' | '.' | '-' | ':' | ';' | '=' | '?' | '@' | '|' => raw(c),
        'A'..='Z' | 'a'..='z' | '0'..='9' => raw(c),
        '#' | '$' | '%' | '&' => sym(c),
        '\\' => sym("backslash"),
        '~' => sym("sim"),
        // rest:
        //   ‚ê†, ", ', (, ), /, <, >, [, ], ^, _, `, {, }
        // - Greek alphabets
        //   * capital
        'Œë' => sym("Alpha"),
        'Œí' => sym("Beta"),
        'Œì' => sym("Gamma"),
        'Œî' => sym("Delta"),
        'Œï' => sym("Epsilon"),
        'Œñ' => sym("Zeta"),
        'Œó' => sym("Eta"),
        'Œò' => sym("Theta"),
        'Œô' => sym("Iota"),
        'Œö' => sym("Kappa"),
        'Œõ' => sym("Lambda"),
        'Œú' => sym("Mu"),
        'Œù' => sym("Nu"),
        'Œû' => sym("Xi"),
        'Œü' => sym("Omicron"),
        'Œ†' => sym("Pi"),
        'Œ°' => sym("Rho"),
        // '\u3a2' is unassigned
        'Œ£' => sym("Sigma"),
        'Œ§' => sym("Tau"),
        'Œ•' => sym("Upsilon"),
        'Œ¶' => sym("Phi"),
        'Œß' => sym("Chi"),
        'Œ®' => sym("Psi"),
        'Œ©' => sym("Omega"),
        //   * small
        'Œ±' => sym("alpha"),
        'Œ≤' => sym("beta"),
        'Œ≥' => sym("gamma"),
        'Œ¥' => sym("delta"),
        'Œµ' => sym("varepsilon"),
        'Œ∂' => sym("zeta"),
        'Œ∑' => sym("eta"),
        'Œ∏' => sym("theta"),
        'Œπ' => sym("iota"),
        'Œ∫' => sym("kappa"),
        'Œª' => sym("lambda"),
        'Œº' => sym("mu"),
        'ŒΩ' => sym("nu"),
        'Œæ' => sym("xi"),
        'Œø' => sym("omicron"),
        'œÄ' => sym("pi"),
        'œÅ' => sym("rho"),
        'œÇ' => sym("varsigma"),
        'œÉ' => sym("sigma"),
        'œÑ' => sym("tau"),
        'œÖ' => sym("upsilon"),
        'œÜ' => sym("varphi"),
        'œá' => sym("chi"),
        'œà' => sym("psi"),
        'œâ' => sym("omega"),
        //   * variants
        'œµ' => sym("epsilon"),
        'œë' => sym("vartheta"),
        'œ∞' => sym("varkappa"),
        'œï' => sym("phi"),
        'œ±' => sym("varrho"),
        'œñ' => sym("varpi"),
        'œù' => sym("digamma"),
        'œ¥' => sym("varTheta"),
        '…∏' => sym("phi"), // Latin phi -> phi
        // - Mathematical Alphanumeric Symbols (1D400-1D7FF)
        //   - Alphabet
        'ùêÄ'..='ùêô' | 'ùêö'..='ùê≥' | 'ùüé'..='ùüó' => cmb("mathbf", nfkc(c)?),
        'ùê¥'..='ùëç' | 'ùëé'..='ùëß' | '‚Ñé' => cmb("mathit", nfkc(c)?),
        'ùë®'..='ùíÅ' | 'ùíÇ'..='ùíõ' => cmb("mathbfit", nfkc(c)?),
        'ùíú'..='ùíµ' | 'ùí∂'..='ùìè' => cmb("mathscr", nfkc(c)?),
        '‚Ñ¨' | '‚Ñ∞' | '‚Ñ±' | '‚Ñã' | '‚Ñê' | '‚Ñí' | '‚Ñ≥' | '‚Ñõ' => cmb("mathscr", nfkc(c)?),
        '‚ÑØ' | '‚Ñä' | '‚Ñ¥' => cmb("mathscr", nfkc(c)?),
        'ùìê'..='ùì©' | 'ùì™'..='ùîÉ' => cmb("mathbfscr", nfkc(c)?),
        'ùîÑ'..='ùîú' | 'ùîû'..='ùî∑' => cmb("mathfrak", nfkc(c)?),
        '‚Ñ≠' | '‚Ñå' | '‚Ñë' | '‚Ñú' | '‚Ñ®' => cmb("mathfrak", nfkc(c)?),
        'ùî∏'..='ùïê' | 'ùïí'..='ùï´' | 'ùüò'..='ùü°' => cmb("mathbb", nfkc(c)?),
        '‚ÑÇ' | '‚Ñç' | '‚Ñï' | '‚Ñô' | '‚Ñö' | '‚Ñù' | '‚Ñ§' => cmb("mathbb", nfkc(c)?),
        'ùï¨'..='ùñÖ' | 'ùñÜ'..='ùñü' => cmb("mathbffrak", nfkc(c)?),
        'ùñ†'..='ùñπ' | 'ùñ∫'..='ùóì' | 'ùü¢'..='ùü´' => cmb("mathsf", nfkc(c)?),
        'ùóî'..='ùó≠' | 'ùóÆ'..='ùòá' | 'ùü¨'..='ùüµ' => cmb("mathbfsf", nfkc(c)?),
        'ùòà'..='ùò°' | 'ùò¢'..='ùòª' => cmb("mathsfit", nfkc(c)?),
        'ùòº'..='ùôï' | 'ùôñ'..='ùôØ' => cmb("mathbfsfit", nfkc(c)?),
        'ùô∞'..='ùöâ' | 'ùöä'..='ùö£' | 'ùü∂'..='ùüø' => cmb("mathtt", nfkc(c)?),
        //     * Dotless
        'ùö§' => sym("imath"),
        'ùö•' => sym("jmath"),
        //   - Greek alphabets
        //   ignore Bold/Italic style
        'ùõ¢'..='ùúõ' | 'ùö®'..='ùõ°' | 'ùúú'..='ùùï' | 'ùùñ'..='ùûè' | 'ùûê'..='ùüâ' | 'ùüã' => {
            tex_of_char(nfkc(c)?)?
        }
        'ƒ±' => cmb("text", 'ƒ±'),
        '»∑' => cmb("text", '»∑'),
        // - Symbols
        // '¬ß' => sym("S"),
        '¬¨' => sym("neg"),
        '¬Æ' => sym("circledR"),
        '¬±' => sym("pm"),
        '√ó' => sym("times"),
        '√∞' => sym("eth"),
        '√∑' => sym("div"),
        'ƒß' => sym("hbar"),
        'œ∂' => sym("backepsilon"),
        '‚Ä†' => sym("dagger"),
        '‚Ä°' => sym("ddagger"),
        '‚Ä¶' => sym("ldots"),
        '‚Ñè' => sym("hslash"),
        '‚Ñì' => sym("ell"),
        '‚Ñò' => sym("wp"),
        '‚Ñß' => sym("mho"),
        '‚Ñ≤' => sym("Finv"),
        '‚Ñµ' => sym("aleph"),
        '‚Ñ∂' => sym("beth"),
        '‚Ñ∑' => sym("gimel"),
        '‚Ñ∏' => sym("daleth"),
        '‚ÖÅ' => sym("Game"),
        '‚Üê' => sym("leftarrow"),
        '‚Üë' => sym("uparrow"),
        '‚Üí' => sym("rightarrow"),
        '‚Üì' => sym("downarrow"),
        '‚Üî' => sym("leftrightarrow"),
        '‚Üï' => sym("updownarrow"),
        '‚Üñ' => sym("nwarrow"),
        '‚Üó' => sym("nearrow"),
        '‚Üò' => sym("searrow"),
        '‚Üô' => sym("swarrow"),
        '‚Üû' => sym("twoheadleftarrow"),
        '‚Ü†' => sym("twoheadrightarrow"),
        '‚Ü¢' => sym("leftarrowtail"),
        '‚Ü£' => sym("rightarrowtail"),
        '‚Ü¶' => sym("mapsto"),
        '‚Ü©' => sym("hookleftarrow"),
        '‚Ü™' => sym("hookrightarrow"),
        '‚Ü´' => sym("looparrowleft"),
        '‚Ü¨' => sym("looparrowright"),
        '‚Ü≠' => sym("leftrightsquigarrow"),
        '‚Ü∞' => sym("Lsh"),
        '‚Ü±' => sym("Rsh"),
        '‚Ü∂' => sym("curvearrowleft"),
        '‚Ü∑' => sym("curvearrowright"),
        '‚Ü∫' => sym("circlearrowleft"),
        '‚Üª' => sym("circlearrowright"),
        '‚Üº' => sym("leftharpoonup"),
        '‚ÜΩ' => sym("leftharpoondown"),
        '‚Üæ' => sym("upharpoonright"),
        '‚Üø' => sym("upharpoonleft"),
        '‚áÄ' => sym("rightharpoonup"),
        '‚áÅ' => sym("rightharpoondown"),
        '‚áÇ' => sym("downharpoonright"),
        '‚áÉ' => sym("downharpoonleft"),
        '‚áÑ' => sym("rightleftarrows"),
        '‚áÜ' => sym("leftrightarrows"),
        '‚áá' => sym("leftleftarrows"),
        '‚áà' => sym("upuparrows"),
        '‚áâ' => sym("rightrightarrows"),
        '‚áä' => sym("downdownarrows"),
        '‚áã' => sym("leftrightharpoons"),
        '‚áå' => sym("rightleftharpoons"),
        '‚áê' => sym("Leftarrow"),
        '‚áë' => sym("Uparrow"),
        '‚áí' => sym("Rightarrow"),
        '‚áì' => sym("Downarrow"),
        '‚áî' => sym("Leftrightarrow"),
        '‚áï' => sym("Updownarrow"),
        '‚áö' => sym("Lleftarrow"),
        '‚áõ' => sym("Rrightarrow"),
        '‚áù' => sym("rightsquigarrow"),
        '‚á†' => sym("dashleftarrow"),
        '‚á¢' => sym("dashrightarrow"),
        '‚àÄ' => sym("forall"),
        '‚àÅ' => sym("complement"),
        '‚àÇ' => sym("partial"),
        '‚àÉ' => sym("exists"),
        '‚àÖ' => sym("emptyset"),
        '‚àÜ' => sym("bigtriangleup"), // increment -> bigtriangleup
        '‚àá' => sym("nabla"),
        '‚àà' | '‚àä' => sym("in"),
        '‚àã' | '‚àç' => sym("ni"),
        '‚àé' => sym("blacksquare"),
        '‚àè' => sym("prod"),
        '‚àê' => sym("coprod"),
        '‚àë' => sym("sum"),
        '‚àí' => raw('-'),
        '‚àì' => sym("mp"),
        '‚àî' => sym("dotplus"),
        '‚àñ' => sym("setminus"),
        '‚àó' => sym("ast"),
        '‚àò' => sym("circ"),
        '‚àô' => sym("bullet"),
        '‚àù' => sym("propto"),
        '‚àû' => sym("infty"),
        '‚à†' => sym("angle"),
        '‚à°' => sym("measuredangle"),
        '‚à¢' => sym("sphericalangle"),
        '‚à£' => sym("mid"),
        '‚à•' => sym("parallel"),
        '‚àß' => sym("wedge"),
        '‚à®' => sym("vee"),
        '‚à©' => sym("cap"),
        '‚à™' => sym("cup"),
        '‚à´' => sym("int"),
        '‚à¨' => sym("iint"),
        '‚à≠' => sym("iiint"),
        '‚àÆ' => sym("oint"),
        '‚à¥' => sym("therefore"),
        '‚àµ' => sym("because"),
        '‚à∂' => raw(':'),
        '‚à∑' => sym("dblcolon"),
        '‚à∏' => cmb("dot", '-'),
        '‚àπ' => sym("eqcolon"),
        '‚àº' => sym("sim"),
        '‚àΩ' => sym("backsim"),
        '‚âÄ' => sym("wr"),
        '‚âÇ' => sym("eqsim"),
        '‚âÉ' => sym("simeq"),
        '‚âÖ' => sym("cong"),
        '‚âà' => sym("approx"),
        '‚âä' => sym("approxeq"),
        '‚âç' => sym("asymp"),
        '‚âé' => sym("Bumpeq"),
        '‚âè' => sym("bumpeq"),
        '‚âê' => sym("doteq"),
        '‚âë' => sym("Doteq"),
        '‚âí' => sym("fallingdotseq"),
        '‚âì' => sym("risingdotseq"),
        '‚âî' => sym("coloneqq"),
        '‚âï' => sym("eqqcolon"),
        '‚âñ' => sym("eqcirc"),
        '‚âó' => sym("circeq"),
        '‚âú' => sym("triangleq"),
        '‚â°' => sym("equiv"),
        '‚â§' => sym("leq"),
        '‚â•' => sym("geq"),
        '‚â¶' => sym("leqq"),
        '‚âß' => sym("geqq"),
        '‚â®' => sym("lneqq"),
        '‚â©' => sym("gneqq"),
        '‚â™' => sym("ll"),
        '‚â´' => sym("gg"),
        '‚â¨' => sym("between"),
        '‚â≤' => sym("lesssim"),
        '‚â≥' => sym("gtrsim"),
        '‚â∂' => sym("lessgtr"),
        '‚â∑' => sym("gtrless"),
        '‚â∫' => sym("prec"),
        '‚âª' => sym("succ"),
        '‚âº' => sym("preccurlyeq"),
        '‚âΩ' => sym("succcurlyeq"),
        '‚âæ' => sym("precsim"),
        '‚âø' => sym("succsim"),
        '‚äÇ' => sym("subset"),
        '‚äÉ' => sym("supset"),
        '‚äÜ' => sym("subseteq"),
        '‚äá' => sym("supseteq"),
        '‚ää' => sym("subsetneq"),
        '‚äã' => sym("supsetneq"),
        '‚äé' => sym("uplus"),
        '‚äè' => sym("sqsubset"),
        '‚äê' => sym("sqsupset"),
        '‚äë' => sym("sqsubseteq"),
        '‚äí' => sym("sqsupseteq"),
        '‚äì' => sym("sqcap"),
        '‚äî' => sym("sqcup"),
        '‚äï' => sym("oplus"),
        '‚äñ' => sym("ominus"),
        '‚äó' => sym("otimes"),
        '‚äò' => sym("oslash"),
        '‚äô' => sym("odot"),
        '‚äö' => sym("circledcirc"),
        '‚äõ' => sym("circledast"),
        '‚äù' => sym("circleddash"),
        '‚äû' => sym("boxplus"),
        '‚äü' => sym("boxminus"),
        '‚ä†' => sym("boxtimes"),
        '‚ä°' => sym("boxdot"),
        '‚ä¢' => sym("vdash"),
        '‚ä£' => sym("dashv"),
        '‚ä§' => sym("top"),
        '‚ä•' => sym("bot"),
        '‚ä¶' => sym("vdash"),
        '‚äß' => sym("models"),
        '‚ä®' => sym("vDash"),
        '‚ä©' => sym("Vdash"),
        '‚ä™' => sym("Vvdash"),
        '‚ä≤' => sym("vartriangleleft"),
        '‚ä≥' => sym("vartriangleright"),
        '‚ä¥' => sym("trianglelefteq"),
        '‚äµ' => sym("trianglerighteq"),
        '‚ä∏' => sym("multimap"),
        '‚ä∫' => sym("intercal"),
        '‚äª' => sym("veebar"),
        '‚äº' => sym("barwedge"),
        '‚ãÄ' => sym("bigwedge"),
        '‚ãÅ' => sym("bigvee"),
        '‚ãÇ' => sym("bigcap"),
        '‚ãÉ' => sym("bigcup"),
        '‚ãÑ' => sym("diamond"),
        '‚ãÖ' => sym("cdot"),
        '‚ãÜ' => sym("star"),
        '‚ãá' => sym("divideontimes"),
        '‚ãà' => sym("bowtie"),
        '‚ãâ' => sym("ltimes"),
        '‚ãä' => sym("rtimes"),
        '‚ãã' => sym("leftthreetimes"),
        '‚ãå' => sym("rightthreetimes"),
        '‚ãç' => sym("backsimeq"),
        '‚ãé' => sym("curlyvee"),
        '‚ãè' => sym("curlywedge"),
        '‚ãê' => sym("Subset"),
        '‚ãë' => sym("Supset"),
        '‚ãí' => sym("Cap"),
        '‚ãì' => sym("Cup"),
        '‚ãî' => sym("pitchfork"),
        '‚ãñ' => sym("lessdot"),
        '‚ãó' => sym("gtrdot"),
        '‚ãò' => sym("lll"),
        '‚ãô' => sym("ggg"),
        '‚ãö' => sym("lesseqgtr"),
        '‚ãõ' => sym("gtreqless"),
        '‚ãû' => sym("curlyeqprec"),
        '‚ãü' => sym("curlyeqsucc"),
        '‚ã¶' => sym("lnsim"),
        '‚ãß' => sym("gnsim"),
        '‚ã®' => sym("precnsim"),
        '‚ã©' => sym("succnsim"),
        '‚ãÆ' => sym("vdots"),
        '‚ãØ' => sym("cdots"),
        '‚ã±' => sym("ddots"),
        '‚å¢' => sym("frown"),
        '‚å£' => sym("smile"),
        '‚ìà' => sym("circledS"),
        '‚ñ°' => sym("square"),
        '‚óØ' => sym("bigcirc"),
        '‚òÖ' => sym("bigstar"),
        '‚ô†' => sym("spadesuit"),
        '‚ô°' => sym("heartsuit"),
        '‚ô¢' => sym("diamondsuit"),
        '‚ô£' => sym("clubsuit"),
        '‚ô≠' => sym("flat"),
        '‚ôÆ' => sym("natural"),
        '‚ôØ' => sym("sharp"),
        '‚úì' => sym("checkmark"),
        '‚ú†' => sym("maltese"),
        '‚üµ' => sym("longleftarrow"),
        '‚ü∂' => sym("longrightarrow"),
        '‚ü∑' => sym("longleftrightarrow"),
        '‚ü∏' => sym("Longleftarrow"),
        '‚üπ' => sym("Longrightarrow"),
        '‚ü∫' => sym("iff"),
        '‚üº' => sym("longmapsto"),
        '‚ß´' => sym("blacklozenge"),
        '‚®Ä' => sym("bigodot"),
        '‚®Å' => sym("bigoplus"),
        '‚®Ç' => sym("bigotimes"),
        '‚®Ñ' => sym("biguplus"),
        '‚®Ü' => sym("bigsqcup"),
        '‚®ø' => sym("amalg"),
        '‚©¥' => sym("Coloneqq"),
        '‚©Ω' => sym("leqslant"),
        '‚©æ' => sym("geqslant"),
        '‚™Ö' => sym("lessapprox"),
        '‚™Ü' => sym("gtrapprox"),
        '‚™á' => sym("lneq"),
        '‚™à' => sym("gneq"),
        '‚™â' => sym("lnapprox"),
        '‚™ä' => sym("gnapprox"),
        '‚™ã' => sym("lesseqqgtr"),
        '‚™å' => sym("gtreqqless"),
        '‚™ï' => sym("eqslantless"),
        '‚™ñ' => sym("eqslantgtr"),
        '‚™Ø' => sym("preceq"),
        '‚™∞' => sym("succeq"),
        '‚™µ' => sym("precneqq"),
        '‚™∂' => sym("succneqq"),
        '‚™∑' => sym("precapprox"),
        '‚™∏' => sym("succapprox"),
        '‚™π' => sym("precnapprox"),
        '‚™∫' => sym("succnapprox"),
        '‚´Ö' => sym("subseteqq"),
        '‚´Ü' => sym("supseteqq"),
        '‚´ã' => sym("subsetneqq"),
        '‚´å' => sym("supsetneqq"),
        _ => return Err(()),
    })
}

fn tex_of_unicode_accent(c: char) -> Result<String, ()> {
    Ok(match c {
        '\u{0300}' => r"\grave",
        '\u{0301}' => r"\acute",
        '\u{0302}' => r"\hat",
        '\u{0303}' => r"\tilde",
        '\u{0304}' => r"\bar",
        '\u{0305}' => r"\overbar",
        '\u{0306}' => r"\breve",
        '\u{0307}' => r"\dot",
        '\u{0308}' => r"\ddot",
        '\u{030A}' => r"\mathring",
        '\u{030C}' => r"\check",
        '\u{0332}' => r"\underline",
        '\u{0338}' => r"\not",
        '\u{034D}' => r"\underleftrightarrow",
        '\u{020D6}' => r"\overleftarrow",
        '\u{020D7}' => r"\vec",
        '\u{020DB}' => r"\dddot",
        '\u{020DC}' => r"\ddddot",
        '\u{020E1}' => r"\overleftrightarrow",
        '\u{020EE}' => r"\underleftarrow",
        '\u{020EF}' => r"\underrightarrow",
        _ => return Err(()),
    }
    .to_string())
}

fn tex_of_ascii_art(s: &str) -> Result<String, ()> {
    Ok(match s {
        // binop
        "+-" => r"\pm",
        "-+" => r"\mp",
        "-:-" => r"\div",
        "@" | "." => r"\cdot",
        "-" => r"\bullet",
        "o" | "O" => r"\circ",
        "x" | "X" => r"\times",
        "(x)" | "(X)" => r"\otimes",
        "(+)" => r"\oplus",
        "(.)" => r"\odot",
        "^" => r"\wedge",
        "V" | "v" => r"\vee",
        "n" => r"\cap",
        "U" | "u" => r"\cup",
        // rel
        "!=" => r"\ne",
        "-:" => r"\eqcolon",
        "-::" => r"\Eqcolon",
        "=:" => r"\eqqcolon",
        "=::" => r"\Eqqcolon",
        ":-" => r"\coloneq",
        "::-" => r"\Coloneq",
        ":=" => r"\coloneqq",
        "::=" => r"\Coloneqq",
        "-=" | "=-" => r"\equiv",
        "-~" => r"\eqsim",
        "~-" => r"\simeq",
        "~=" => r"\cong",
        "~~" => r"\approx",
        "~~-" => r"\approxeq",
        ":~" => r"\colonsim",
        "::~" => r"\Colonsim",
        "oc" => r"\propto",
        "<" => r"\lt",
        "<=" => r"\le",
        ">" => r"\gt",
        ">=" => r"\ge",
        "<<" => r"\ll",
        "<<<" => r"\lll",
        ">>" => r"\gg",
        ">>>" => r"\ggg",
        "|-" => r"\vdash",
        "||-" => r"\Vdash",
        "|=" => r"\vDash",
        "-|" => r"\dashv",
        // arrow
        "-->" => r"\leftarrow",
        "<--" => r"\rightarrow",
        "==>" => r"\Rightarrow",
        "<==" => r"\Leftarrow",
        "<<-" => r"\twoheadleftarrow",
        "->>" => r"\twoheadrightarrow",
        "<-<" => r"\leftarrowtail",
        ">->" => r"\rightarrowtail",
        "|->" => r"\mapsto",
        "<=>" => r"\Leftrightarrow",
        "<->" => r"\leftrightarrow",
        "~~>" => r"\rightsquigarrow",
        "<~>" => r"\leftrightsquigarrow",
        // symbol
        "_|_" => r"\bot",
        "T" => r"\top",
        "h-" => r"\hbar",
        "t" | "+" => r"\dagger",
        "A" => r"\forall",
        "E" => r"\exists",
        "oo" => r"\infty",
        "..." => r"\ldots",
        "---" => r"\cdots",
        "||" => r"\|",
        _ => return Err(()),
    }
    .to_string())
}

fn tex_of_maybe_abbreviated_symbol_name(s: &str) -> String {
    match s {
        _ => format!(r"\{}", s),
    }
}

fn tex_of_maybe_abbreviated_accent_name(s: &str) -> String {
    match s {
        "!" => r"\not".to_string(),
        _ => format!(r"\{}", s),
    }
}

fn take_string_literal_content(s: &str) -> IResult<&str, String> {
    map(
        delimited(tag(r#"""#), take_until(r#"""#), tag(r#"""#)),
        String::from,
    )(s)
}

fn take_raw_string_literal_content(s: &str) -> IResult<&str, String> {
    flat_map(
        map(terminated(many1(tag("#")), tag(r#"""#)), |x| x.len()),
        |num| {
            map(
                many_till(anychar, pair(tag(r#"""#), count(tag("#"), num))),
                |(content, _)| content.into_iter().collect(),
            )
        },
    )(s)
}

fn escape_tex_string_math(s: &str) -> String {
    s.chars()
        .into_iter()
        .map(|c| match c {
            '#' | '$' | '%' | '_' | '{' | '}' => format!(r"\{}", c),
            '~' => r"{\textasciitilde}".to_string(),
            '^' => r"{\textasciicircum}".to_string(),
            '\\' => r"{\backslash}".to_string(),
            _ => c.to_string(),
        })
        .collect()
}

fn escape_tex_string_text(s: &str) -> String {
    s.chars()
        .into_iter()
        .map(|c| match c {
            '$' | '{' | '}' | '\\' => format!(r"\{}", c),
            _ => c.to_string(),
        })
        .collect()
}

fn resolve_string_literal_accent(content: &str, accents: Vec<&str>) -> Result<String, ()> {
    let accents: Result<Vec<_>, _> = accents
        .into_iter()
        .map(|x| {
            Ok(match x {
                "bb" | "mathbb" => "bb",
                "b" | "bf" | "mathbf" => "bf",
                "c" | "cc" | "ca" | "cal" | "mathcal" => "cal",
                "f" | "fr" | "fra" | "frak" | "frk" | "mathfrak" => "frak",
                "i" | "it" | "mathit" => "it",
                "r" | "rm" | "mathrm" => "rm",
                "sc" | "scr" | "mathscr" => "scr",
                "sf" | "mathsf" => "sf",
                "tt" | "mathtt" => "tt",
                "bffr" | "frbf" | "bffrak" | "frakbf" | "mathbffrak" | "mathfrakbf" => "bffrak",
                "bfit" | "itbf" | "mathbfit" | "mathitbf" => "bfit",
                "bfsc" | "scbf" | "bfscr" | "scrbf" | "mathbfscr" | "mathscrbf" => "bfscr",
                "bfsf" | "sfbf" | "mathbfsf" | "mathsfbf" => "bfsf",
                "sfit" | "itsf" | "mathsfit" | "mathitsf" => "sfit",
                "bfsfit" | "bfitsf" | "sfbfit" | "sfitbf" | "itsfbf" | "itbfsf" | "mathbfsfit"
                | "mathbfitsf" | "mathsfbfit" | "mathsfitbf" | "mathitsfbf" | "mathitbfsf" => {
                    "bfsfit"
                }
                "t" | "te" | "text" => "text",
                _ => return Err(()),
            })
        })
        .collect();
    let mut accents = accents?;
    accents.sort();
    accents.dedup();
    let content = match accents[..] {
        ["text"] => escape_tex_string_text(&content),
        _ => escape_tex_string_math(&content),
    };
    let prefix = match accents[..] {
        ["bb"] => r"\mathbb",
        ["bf"] => r"\mathbf",
        ["bf", "cal"] => r"\mathbfcal",
        ["bf", "frak"] | ["bffrak"] => r"\mathbffrak",
        ["bf", "it"] | ["bfit"] => r"\mathbfit",
        ["bf", "scr"] | ["bfscr"] => r"\mathbfscr",
        ["bf", "it", "sf"] | ["bfit", "sf"] | ["bfsf", "it"] | ["bf", "sfit"] | ["bfsfit"] => {
            r"\mathbfsfit"
        }
        ["cal"] => r"\mathcal",
        ["frak"] => r"\mathfrak",
        ["it"] => r"\mathit",
        ["it", "sf"] | ["sfit"] => r"\mathsfit",
        ["rm"] | [] => r"\mathrm",
        ["scr"] => r"\mathscr",
        ["sf"] => r"\mathsf",
        ["tt"] => r"\mathtt",
        ["text"] => r"\text",
        _ => return Err(()),
    };
    Ok(format!("{}{{{}}}", prefix, content))
}

#[cfg(test)]
mod tests {
    use super::*;

    fn x(a: &str) -> (&str, Token) {
        take_symbol(a).unwrap()
    }
    fn y<T: Display>(y: T) -> Token {
        Token::Symbol(y.to_string())
    }

    #[test]
    fn test_take_symbol() {
        assert_eq!(x("123"), (r"23", y(r"1")));
        assert_eq!(x("1.23"), (r".23", y(r"1")));
        assert_eq!(x("1'.23"), (r".23", y(r"1'")));
        assert_eq!(x("aŒì"), (r"Œì", y(r"a")));
        assert_eq!(x("Œìa"), ("a", y(r"\Gamma")));
        assert_eq!(x("Œ±Ãábcd"), ("bcd", y(r"\dot{\alpha}")));
        assert_eq!(x("<a>''"), ("", y("a''")));
        assert_eq!(x("<a dot>'b"), ("b", y(r"\dot{a}'")));
        assert_eq!(x("< a  dot  >"), ("", y(r"\dot{a}")));
        assert_eq!(x("<  a dot>"), ("", y(r"\dot{a}")));
        assert_eq!(x("<a dot !>"), ("", y(r"\not{\dot{a}}")));
        assert_eq!(x("`oo`"), ("", y(r"\infty")));
        assert_eq!(x("`oo`23"), ("23", y(r"\infty")));
        assert_eq!(x("`oo`'23"), ("23", y(r"\infty'")));
        assert_eq!(x("0.1234ABC"), (".1234ABC", y("0")));
        assert_eq!(x("0A1B3C"), ("A1B3C", y("0")));
        assert_eq!(x("0 1 3"), (" 1 3", y("0")));
        assert_eq!(x("<1.23 hat>"), ("", y(r"\hat{1.23}")));
        assert_eq!(x("<Œ±Ãá tilde !>"), ("", y(r"\not{\tilde{\dot{\alpha}}}")));
        assert_eq!(x("<Œ±Ãá!>"), ("", y(r"\not{\dot{\alpha}}")));
        assert_eq!(x("<Œ±Ãá! tilde>"), ("", y(r"\tilde{\not{\dot{\alpha}}}")));
        assert_eq!(x("< Œ±Ãá tilde ! >"), ("", y(r"\not{\tilde{\dot{\alpha}}}")));
        assert_eq!(x("<Œ±Ãá  tilde !  >"), ("", y(r"\not{\tilde{\dot{\alpha}}}")));
        assert_eq!(x("<`oo` !>"), ("", y(r"\not{\infty}")));
        assert_eq!(x("< `oo` !>"), ("", y(r"\not{\infty}")));
        assert_eq!(x("<`<` !>"), ("", y(r"\not{\lt}")));
        assert_eq!(x("<!!>"), ("", y(r"\not{!}")));
        assert_eq!(x("<   `oo` !  >"), ("", y(r"\not{\infty}")));
        assert_eq!(x("<alpha>"), ("", y(r"\alpha")));
        assert_eq!(x("<alpha dot>"), ("", y(r"\dot{\alpha}")));
        assert_eq!(x(r#""aaa""#), ("", y(r"\mathrm{aaa}")));
        assert_eq!(x(r#"<"aaa">"#), ("", y(r#"\mathrm{aaa}"#)));
        assert_eq!(x(r#"< "aaa"  >"#), ("", y(r#"\mathrm{aaa}"#)));
        assert_eq!(x(r#"< "aaa"bb  >"#), ("", y(r#"\mathbb{aaa}"#)));
        assert_eq!(x(r#"< "aaa"  bf it>"#), ("", y(r#"\mathbfit{aaa}"#)));
        assert_eq!(x(r#"<"aaa"it    bf>"#), ("", y(r#"\mathbfit{aaa}"#)));
        assert_eq!(x(r#"<"aaa"it bf sf>"#), ("", y(r#"\mathbfsfit{aaa}"#)));
        assert_eq!(x(r#"<"aaa"it bf>"#), ("", y(r#"\mathbfit{aaa}"#)));
        assert_eq!(x(r####"< ##"aaa"## te  >"####), ("", y(r#"\text{aaa}"#)));
        assert_eq!(x(r####"< ##"aaa"## te  >"####), ("", y(r#"\text{aaa}"#)));
        assert_eq!(
            x(r####"< ##"aa"#a"## te  >"####),
            ("", y(r##"\text{aa"#a}"##))
        );
    }
}
