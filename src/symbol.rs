use super::token::Token;

use nom::{
    branch::alt,
    bytes::complete::{is_a, tag, take_until},
    character::complete::{alpha1, alphanumeric1, anychar, char},
    combinator::{map, map_res},
    multi::{count, many0, many1, many_till},
    sequence::{pair, tuple},
    IResult,
};
use std::{fmt::Display, iter};
use unicode_normalization::UnicodeNormalization;

fn take_symbol_from_single_char(s: &str) -> IResult<&str, String> {
    let (s, (mut tex, accents)) = tuple((
        map_res(anychar, tex_of_char),
        many0(map_res(anychar, tex_of_unicode_accent)),
    ))(s)?;
    for accent in accents {
        tex = format!("{}{{ {} }}", accent, tex);
    }
    Ok((s, tex))
}

fn take_symbol_from_ascii_art(s: &str) -> IResult<&str, String> {
    let (s, (_, tex, _)) = tuple((
        char('.'),
        map_res(take_until("."), tex_of_ascii_art),
        char('.'),
    ))(s)?;
    Ok((s, tex))
}

fn take_symbol_with_accent(s: &str) -> IResult<&str, String> {
    //! `symbol_with_accent` is
    //!
    //! `<({char_with_unicode_accent}|{ascii_art}|{symbol_name})( +{accent_name})*>`
    //!
    //! where
    //! - `symbol_name` is `([A-Za-z]+)`
    //! - `ascii_art` is `(\.[^\.]+\.)`
    //! - `accent_name` is `!|[A-Za-z0-9]+`
    let (s, (_, mut tex, accents, _)) = tuple((
        char('<'),
        alt((
            take_symbol_from_single_char,
            take_symbol_from_ascii_art,
            map(alpha1, tex_of_maybe_abbreviated_symbol_name),
        )),
        many0(pair(
            is_a(" "),
            map(
                alt((alphanumeric1, tag("!"))),
                tex_of_maybe_abbreviated_accent_name,
            ),
        )),
        char('>'),
    ))(s)?;
    for (_, accent) in accents {
        tex = format!(r"{}{{ {} }}", accent, tex);
    }
    Ok((s, tex))
}

fn take_symbol(s: &str) -> IResult<&str, Token> {
    //! `symbol` is
    //!
    //! `({char_with_unicode_accent}|{ascii_art}|{symbol_with_accent})'*`
    //!
    //! where
    //! - `ascii_art` is `(\.[^\.]+\.)`
    let (s, (t, u)) = pair(
        alt((
            take_symbol_with_accent,
            take_symbol_from_single_char,
            take_symbol_from_ascii_art,
        )),
        is_a("'"),
    )(s)?;
    Ok((s, Token::Symbol(format!("{}{}", t, u))))
}

fn take_string_literal_content(s: &str) -> IResult<&str, String> {
    let (s, (_, content, _)) = alt((
        tuple((char('"'), take_until(r#"""#), char('"'))),
        tuple((char('`'), take_until("`"), char('`'))),
    ))(s)?;
    Ok((s, content.to_string()))
}

fn take_raw_string_literal_content(s: &str) -> IResult<&str, String> {
    let (s, (sharps, _)) = pair(many1(char('#')), char('"'))(s)?;
    let (s, (content, _)) = many_till(anychar, pair(count(char('#'), sharps.len()), char('"')))(s)?;
    Ok((s, content.into_iter().collect()))
}

fn escape_tex_string_math(s: &str) -> String {
    let mut rsl = "".to_string();
    for c in s.chars() {
        match c {
            '#' | '$' | '%' | '_' | '{' | '}' => {
                rsl.push('\\');
                rsl.push(c)
            }
            '~' => rsl.push_str(r"{\textasciitilde}"),
            '^' => rsl.push_str(r"{\textasciicircum}"),
            '\\' => rsl.push_str(r"{\backslash}"),
            _ => rsl.push(c),
        }
    }
    rsl
}

fn escape_tex_string_text(s: &str) -> String {
    s.chars()
        .into_iter()
        .map(|c| match c {
            '$' | '{' | '}' | '\\' => {
                format!(r"\{}", c)
            }
            _ => c.to_string(),
        })
        .collect()
}

fn tex_of_char(c: char) -> Result<String, ()> {
    let nfkc = |c: char| iter::once(c).nfkc().next().ok_or(());

    fn raw(c: char) -> String {
        c.to_string()
    }
    fn sym<T: Display>(s: T) -> String {
        format!(r"\{}", s)
    }
    fn cmb<T: Display>(op: &str, arg: T) -> String {
        format!(r"\{}{{ {} }}", op, arg)
    }

    Ok(match c {
        // - ASCII
        '!' | '*' | '+' | ',' | '-' | ':' | ';' | '=' | '?' | '@' | '|' => raw(c),
        'A'..='Z' | 'a'..='z' => raw(c),
        '#' | '$' | '%' | '&' => sym(c),
        '\\' => sym("backslash"),
        '~' => sym("sim"),
        // rest:
        //   ‚ê†, ", ', (, ), ., /, 0-9, <, >, [, ], ^, _, `, {, }
        // - Greek alphabets
        //   * capital
        'Œë' => sym("Alpha"),
        'Œí' => sym("Beta"),
        'Œì' => sym("Gamma"),
        'Œî' => sym("Delta"),
        'Œï' => sym("Epsilon"),
        'Œñ' => sym("Zeta"),
        'Œó' => sym("Eta"),
        'Œò' => sym("Theta"),
        'Œô' => sym("Iota"),
        'Œö' => sym("Kappa"),
        'Œõ' => sym("Lambda"),
        'Œú' => sym("Mu"),
        'Œù' => sym("Nu"),
        'Œû' => sym("Xi"),
        'Œü' => sym("Omicron"),
        'Œ†' => sym("Pi"),
        'Œ°' => sym("Rho"),
        // '\u3a2' is unassigned
        'Œ£' => sym("Sigma"),
        'Œ§' => sym("Tau"),
        'Œ•' => sym("Upsilon"),
        'Œ¶' => sym("Phi"),
        'Œß' => sym("Chi"),
        'Œ®' => sym("Psi"),
        'Œ©' => sym("Omega"),
        //   * small
        'Œ±' => sym("alpha"),
        'Œ≤' => sym("beta"),
        'Œ≥' => sym("gamma"),
        'Œ¥' => sym("delta"),
        'Œµ' => sym("varepsilon"),
        'Œ∂' => sym("zeta"),
        'Œ∑' => sym("eta"),
        'Œ∏' => sym("theta"),
        'Œπ' => sym("iota"),
        'Œ∫' => sym("kappa"),
        'Œª' => sym("lambda"),
        'Œº' => sym("mu"),
        'ŒΩ' => sym("nu"),
        'Œæ' => sym("xi"),
        'Œø' => sym("omicron"),
        'œÄ' => sym("pi"),
        'œÅ' => sym("rho"),
        'œÇ' => sym("varsigma"),
        'œÉ' => sym("sigma"),
        'œÑ' => sym("tau"),
        'œÖ' => sym("upsilon"),
        'œÜ' => sym("varphi"),
        'œá' => sym("chi"),
        'œà' => sym("psi"),
        'œâ' => sym("omega"),
        //   * variants
        'œµ' => sym("epsilon"),
        'œë' => sym("vartheta"),
        'œ∞' => sym("varkappa"),
        'œï' => sym("phi"),
        'œ±' => sym("varrho"),
        'œñ' => sym("varpi"),
        'œù' => sym("digamma"),
        'œ¥' => sym("varTheta"),
        '…∏' => sym("phi"), // Latin phi -> phi
        // - Mathematical Alphanumeric Symbols (1D400-1D7FF)
        //   - Alphabet
        'ùêÄ'..='ùêô' | 'ùêö'..='ùê≥' | 'ùüé'..='ùüó' => cmb("mathbf", nfkc(c)?),
        'ùê¥'..='ùëç' | 'ùëé'..='ùëß' | '‚Ñé' => cmb("mathit", nfkc(c)?),
        'ùë®'..='ùíÅ' | 'ùíÇ'..='ùíõ' => cmb("mathbfit", nfkc(c)?),
        'ùíú'..='ùíµ' | 'ùí∂'..='ùìè' => cmb("mathscr", nfkc(c)?),
        '‚Ñ¨' | '‚Ñ∞' | '‚Ñ±' | '‚Ñã' | '‚Ñê' | '‚Ñí' | '‚Ñ≥' | '‚Ñõ' => cmb("mathscr", nfkc(c)?),
        '‚ÑØ' | '‚Ñä' | '‚Ñ¥' => cmb("mathscr", nfkc(c)?),
        'ùìê'..='ùì©' | 'ùì™'..='ùîÉ' => cmb("mathbfscr", nfkc(c)?),
        'ùîÑ'..='ùîú' | 'ùîû'..='ùî∑' => cmb("mathfrak", nfkc(c)?),
        '‚Ñ≠' | '‚Ñå' | '‚Ñë' | '‚Ñú' | '‚Ñ®' => cmb("mathfrak", nfkc(c)?),
        'ùî∏'..='ùïê' | 'ùïí'..='ùï´' | 'ùüò'..='ùü°' => cmb("mathbb", nfkc(c)?),
        '‚ÑÇ' | '‚Ñç' | '‚Ñï' | '‚Ñô' | '‚Ñö' | '‚Ñù' | '‚Ñ§' => cmb("mathbb", nfkc(c)?),
        'ùï¨'..='ùñÖ' | 'ùñÜ'..='ùñü' => cmb("mathbffrak", nfkc(c)?),
        'ùñ†'..='ùñπ' | 'ùñ∫'..='ùóì' | 'ùü¢'..='ùü´' => cmb("mathsf", nfkc(c)?),
        'ùóî'..='ùó≠' | 'ùóÆ'..='ùòá' | 'ùü¨'..='ùüµ' => cmb("mathbfsf", nfkc(c)?),
        'ùòà'..='ùò°' | 'ùò¢'..='ùòª' => cmb("mathsfit", nfkc(c)?),
        'ùòº'..='ùôï' | 'ùôñ'..='ùôØ' => cmb("mathbfsfit", nfkc(c)?),
        'ùô∞'..='ùöâ' | 'ùöä'..='ùö£' | 'ùü∂'..='ùüø' => cmb("mathtt", nfkc(c)?),
        //     * Dotless
        'ùö§' => sym("imath"),
        'ùö•' => sym("jmath"),
        //   - Greek alphabets
        //   ignore Bold/Italic style
        'ùõ¢'..='ùúõ' | 'ùö®'..='ùõ°' | 'ùúú'..='ùùï' | 'ùùñ'..='ùûè' | 'ùûê'..='ùüâ' | 'ùüã' => {
            tex_of_char(nfkc(c)?)?
        }
        'ƒ±' => cmb("text", 'ƒ±'),
        '»∑' => cmb("text", '»∑'),
        // - Symbols
        // '¬ß' => sym("S"),
        '¬¨' => sym("neg"),
        '¬Æ' => sym("circledR"),
        '¬±' => sym("pm"),
        '√ó' => sym("times"),
        '√∞' => sym("eth"),
        '√∑' => sym("div"),
        'ƒß' => sym("hbar"),
        'œ∂' => sym("backepsilon"),
        '‚Ä†' => sym("dagger"),
        '‚Ä°' => sym("ddagger"),
        '‚Ä¶' => sym("ldots"),
        '‚Ñè' => sym("hslash"),
        '‚Ñì' => sym("ell"),
        '‚Ñò' => sym("wp"),
        '‚Ñß' => sym("mho"),
        '‚Ñ≤' => sym("Finv"),
        '‚Ñµ' => sym("aleph"),
        '‚Ñ∂' => sym("beth"),
        '‚Ñ∑' => sym("gimel"),
        '‚Ñ∏' => sym("daleth"),
        '‚ÖÅ' => sym("Game"),
        '‚Üê' => sym("leftarrow"),
        '‚Üë' => sym("uparrow"),
        '‚Üí' => sym("rightarrow"),
        '‚Üì' => sym("downarrow"),
        '‚Üî' => sym("leftrightarrow"),
        '‚Üï' => sym("updownarrow"),
        '‚Üñ' => sym("nwarrow"),
        '‚Üó' => sym("nearrow"),
        '‚Üò' => sym("searrow"),
        '‚Üô' => sym("swarrow"),
        '‚Üû' => sym("twoheadleftarrow"),
        '‚Ü†' => sym("twoheadrightarrow"),
        '‚Ü¢' => sym("leftarrowtail"),
        '‚Ü£' => sym("rightarrowtail"),
        '‚Ü¶' => sym("mapsto"),
        '‚Ü©' => sym("hookleftarrow"),
        '‚Ü™' => sym("hookrightarrow"),
        '‚Ü´' => sym("looparrowleft"),
        '‚Ü¨' => sym("looparrowright"),
        '‚Ü≠' => sym("leftrightsquigarrow"),
        '‚Ü∞' => sym("Lsh"),
        '‚Ü±' => sym("Rsh"),
        '‚Ü∂' => sym("curvearrowleft"),
        '‚Ü∑' => sym("curvearrowright"),
        '‚Ü∫' => sym("circlearrowleft"),
        '‚Üª' => sym("circlearrowright"),
        '‚Üº' => sym("leftharpoonup"),
        '‚ÜΩ' => sym("leftharpoondown"),
        '‚Üæ' => sym("upharpoonright"),
        '‚Üø' => sym("upharpoonleft"),
        '‚áÄ' => sym("rightharpoonup"),
        '‚áÅ' => sym("rightharpoondown"),
        '‚áÇ' => sym("downharpoonright"),
        '‚áÉ' => sym("downharpoonleft"),
        '‚áÑ' => sym("rightleftarrows"),
        '‚áÜ' => sym("leftrightarrows"),
        '‚áá' => sym("leftleftarrows"),
        '‚áà' => sym("upuparrows"),
        '‚áâ' => sym("rightrightarrows"),
        '‚áä' => sym("downdownarrows"),
        '‚áã' => sym("leftrightharpoons"),
        '‚áå' => sym("rightleftharpoons"),
        '‚áê' => sym("Leftarrow"),
        '‚áë' => sym("Uparrow"),
        '‚áí' => sym("Rightarrow"),
        '‚áì' => sym("Downarrow"),
        '‚áî' => sym("Leftrightarrow"),
        '‚áï' => sym("Updownarrow"),
        '‚áö' => sym("Lleftarrow"),
        '‚áõ' => sym("Rrightarrow"),
        '‚áù' => sym("rightsquigarrow"),
        '‚á†' => sym("dashleftarrow"),
        '‚á¢' => sym("dashrightarrow"),
        '‚àÄ' => sym("forall"),
        '‚àÅ' => sym("complement"),
        '‚àÇ' => sym("partial"),
        '‚àÉ' => sym("exists"),
        '‚àÖ' => sym("emptyset"),
        '‚àÜ' => sym("bigtriangleup"), // increment -> bigtriangleup
        '‚àá' => sym("nabla"),
        '‚àà' | '‚àä' => sym("in"),
        '‚àã' | '‚àç' => sym("ni"),
        '‚àé' => sym("blacksquare"),
        '‚àè' => sym("prod"),
        '‚àê' => sym("coprod"),
        '‚àë' => sym("sum"),
        '‚àí' => raw('-'),
        '‚àì' => sym("mp"),
        '‚àî' => sym("dotplus"),
        '‚àñ' => sym("setminus"),
        '‚àó' => sym("ast"),
        '‚àò' => sym("circ"),
        '‚àô' => sym("bullet"),
        '‚àù' => sym("propto"),
        '‚àû' => sym("infty"),
        '‚à†' => sym("angle"),
        '‚à°' => sym("measuredangle"),
        '‚à¢' => sym("sphericalangle"),
        '‚à£' => sym("mid"),
        '‚à•' => sym("parallel"),
        '‚àß' => sym("wedge"),
        '‚à®' => sym("vee"),
        '‚à©' => sym("cap"),
        '‚à™' => sym("cup"),
        '‚à´' => sym("int"),
        '‚à¨' => sym("iint"),
        '‚à≠' => sym("iiint"),
        '‚àÆ' => sym("oint"),
        '‚à¥' => sym("therefore"),
        '‚àµ' => sym("because"),
        '‚à∂' => raw(':'),
        '‚à∑' => sym("dblcolon"),
        '‚à∏' => cmb("dot", '-'),
        '‚àπ' => sym("eqcolon"),
        '‚àº' => sym("sim"),
        '‚àΩ' => sym("backsim"),
        '‚âÄ' => sym("wr"),
        '‚âÇ' => sym("eqsim"),
        '‚âÉ' => sym("simeq"),
        '‚âÖ' => sym("cong"),
        '‚âà' => sym("approx"),
        '‚âä' => sym("approxeq"),
        '‚âç' => sym("asymp"),
        '‚âé' => sym("Bumpeq"),
        '‚âè' => sym("bumpeq"),
        '‚âê' => sym("doteq"),
        '‚âë' => sym("Doteq"),
        '‚âí' => sym("fallingdotseq"),
        '‚âì' => sym("risingdotseq"),
        '‚âî' => sym("coloneqq"),
        '‚âï' => sym("eqqcolon"),
        '‚âñ' => sym("eqcirc"),
        '‚âó' => sym("circeq"),
        '‚âú' => sym("triangleq"),
        '‚â°' => sym("equiv"),
        '‚â§' => sym("leq"),
        '‚â•' => sym("geq"),
        '‚â¶' => sym("leqq"),
        '‚âß' => sym("geqq"),
        '‚â®' => sym("lneqq"),
        '‚â©' => sym("gneqq"),
        '‚â™' => sym("ll"),
        '‚â´' => sym("gg"),
        '‚â¨' => sym("between"),
        '‚â≤' => sym("lesssim"),
        '‚â≥' => sym("gtrsim"),
        '‚â∂' => sym("lessgtr"),
        '‚â∑' => sym("gtrless"),
        '‚â∫' => sym("prec"),
        '‚âª' => sym("succ"),
        '‚âº' => sym("preccurlyeq"),
        '‚âΩ' => sym("succcurlyeq"),
        '‚âæ' => sym("precsim"),
        '‚âø' => sym("succsim"),
        '‚äÇ' => sym("subset"),
        '‚äÉ' => sym("supset"),
        '‚äÜ' => sym("subseteq"),
        '‚äá' => sym("supseteq"),
        '‚ää' => sym("subsetneq"),
        '‚äã' => sym("supsetneq"),
        '‚äé' => sym("uplus"),
        '‚äè' => sym("sqsubset"),
        '‚äê' => sym("sqsupset"),
        '‚äë' => sym("sqsubseteq"),
        '‚äí' => sym("sqsupseteq"),
        '‚äì' => sym("sqcap"),
        '‚äî' => sym("sqcup"),
        '‚äï' => sym("oplus"),
        '‚äñ' => sym("ominus"),
        '‚äó' => sym("otimes"),
        '‚äò' => sym("oslash"),
        '‚äô' => sym("odot"),
        '‚äö' => sym("circledcirc"),
        '‚äõ' => sym("circledast"),
        '‚äù' => sym("circleddash"),
        '‚äû' => sym("boxplus"),
        '‚äü' => sym("boxminus"),
        '‚ä†' => sym("boxtimes"),
        '‚ä°' => sym("boxdot"),
        '‚ä¢' => sym("vdash"),
        '‚ä£' => sym("dashv"),
        '‚ä§' => sym("top"),
        '‚ä•' => sym("bot"),
        '‚ä¶' => sym("vdash"),
        '‚äß' => sym("models"),
        '‚ä®' => sym("vDash"),
        '‚ä©' => sym("Vdash"),
        '‚ä™' => sym("Vvdash"),
        '‚ä≤' => sym("vartriangleleft"),
        '‚ä≥' => sym("vartriangleright"),
        '‚ä¥' => sym("trianglelefteq"),
        '‚äµ' => sym("trianglerighteq"),
        '‚ä∏' => sym("multimap"),
        '‚ä∫' => sym("intercal"),
        '‚äª' => sym("veebar"),
        '‚äº' => sym("barwedge"),
        '‚ãÄ' => sym("bigwedge"),
        '‚ãÅ' => sym("bigvee"),
        '‚ãÇ' => sym("bigcap"),
        '‚ãÉ' => sym("bigcup"),
        '‚ãÑ' => sym("diamond"),
        '‚ãÖ' => sym("cdot"),
        '‚ãÜ' => sym("star"),
        '‚ãá' => sym("divideontimes"),
        '‚ãà' => sym("bowtie"),
        '‚ãâ' => sym("ltimes"),
        '‚ãä' => sym("rtimes"),
        '‚ãã' => sym("leftthreetimes"),
        '‚ãå' => sym("rightthreetimes"),
        '‚ãç' => sym("backsimeq"),
        '‚ãé' => sym("curlyvee"),
        '‚ãè' => sym("curlywedge"),
        '‚ãê' => sym("Subset"),
        '‚ãë' => sym("Supset"),
        '‚ãí' => sym("Cap"),
        '‚ãì' => sym("Cup"),
        '‚ãî' => sym("pitchfork"),
        '‚ãñ' => sym("lessdot"),
        '‚ãó' => sym("gtrdot"),
        '‚ãò' => sym("lll"),
        '‚ãô' => sym("ggg"),
        '‚ãö' => sym("lesseqgtr"),
        '‚ãõ' => sym("gtreqless"),
        '‚ãû' => sym("curlyeqprec"),
        '‚ãü' => sym("curlyeqsucc"),
        '‚ã¶' => sym("lnsim"),
        '‚ãß' => sym("gnsim"),
        '‚ã®' => sym("precnsim"),
        '‚ã©' => sym("succnsim"),
        '‚ãÆ' => sym("vdots"),
        '‚ãØ' => sym("cdots"),
        '‚ã±' => sym("ddots"),
        '‚å¢' => sym("frown"),
        '‚å£' => sym("smile"),
        '‚ìà' => sym("circledS"),
        '‚ñ°' => sym("square"),
        '‚óØ' => sym("bigcirc"),
        '‚òÖ' => sym("bigstar"),
        '‚ô†' => sym("spadesuit"),
        '‚ô°' => sym("heartsuit"),
        '‚ô¢' => sym("diamondsuit"),
        '‚ô£' => sym("clubsuit"),
        '‚ô≠' => sym("flat"),
        '‚ôÆ' => sym("natural"),
        '‚ôØ' => sym("sharp"),
        '‚úì' => sym("checkmark"),
        '‚ú†' => sym("maltese"),
        '‚üµ' => sym("longleftarrow"),
        '‚ü∂' => sym("longrightarrow"),
        '‚ü∑' => sym("longleftrightarrow"),
        '‚ü∏' => sym("Longleftarrow"),
        '‚üπ' => sym("Longrightarrow"),
        '‚ü∫' => sym("iff"),
        '‚üº' => sym("longmapsto"),
        '‚ß´' => sym("blacklozenge"),
        '‚®Ä' => sym("bigodot"),
        '‚®Å' => sym("bigoplus"),
        '‚®Ç' => sym("bigotimes"),
        '‚®Ñ' => sym("biguplus"),
        '‚®Ü' => sym("bigsqcup"),
        '‚®ø' => sym("amalg"),
        '‚©¥' => sym("Coloneqq"),
        '‚©Ω' => sym("leqslant"),
        '‚©æ' => sym("geqslant"),
        '‚™Ö' => sym("lessapprox"),
        '‚™Ü' => sym("gtrapprox"),
        '‚™á' => sym("lneq"),
        '‚™à' => sym("gneq"),
        '‚™â' => sym("lnapprox"),
        '‚™ä' => sym("gnapprox"),
        '‚™ã' => sym("lesseqqgtr"),
        '‚™å' => sym("gtreqqless"),
        '‚™ï' => sym("eqslantless"),
        '‚™ñ' => sym("eqslantgtr"),
        '‚™Ø' => sym("preceq"),
        '‚™∞' => sym("succeq"),
        '‚™µ' => sym("precneqq"),
        '‚™∂' => sym("succneqq"),
        '‚™∑' => sym("precapprox"),
        '‚™∏' => sym("succapprox"),
        '‚™π' => sym("precnapprox"),
        '‚™∫' => sym("succnapprox"),
        '‚´Ö' => sym("subseteqq"),
        '‚´Ü' => sym("supseteqq"),
        '‚´ã' => sym("subsetneqq"),
        '‚´å' => sym("supsetneqq"),
        _ => return Err(()),
    })
}

fn tex_of_unicode_accent(c: char) -> Result<String, ()> {
    Ok(match c {
        '\u{0300}' => r"\grave",
        '\u{0301}' => r"\acute",
        '\u{0302}' => r"\hat",
        '\u{0303}' => r"\tilde",
        '\u{0304}' => r"\bar",
        '\u{0305}' => r"\overbar",
        '\u{0306}' => r"\breve",
        '\u{0307}' => r"\dot",
        '\u{0308}' => r"\ddot",
        '\u{030A}' => r"\mathring",
        '\u{030C}' => r"\check",
        '\u{0332}' => r"\underline",
        '\u{0338}' => r"\not",
        '\u{034D}' => r"\underleftrightarrow",
        '\u{020D6}' => r"\overleftarrow",
        '\u{020D7}' => r"\vec",
        '\u{020DB}' => r"\dddot",
        '\u{020DC}' => r"\ddddot",
        '\u{020E1}' => r"\overleftrightarrow",
        '\u{020EE}' => r"\underleftarrow",
        '\u{020EF}' => r"\underrightarrow",
        _ => return Err(()),
    }
    .to_string())
}

fn tex_of_ascii_art(s: &str) -> Result<String, ()> {
    Ok(match s {
        "!=" => r"\ne",
        "->" => r"\leftarrow",
        "<-" => r"\rightarrow",
        "=>" => r"\Rightarrow",
        "=->" => r"\Rightarrow",
        "-=>" => r"\Rightarrow",
        "<-=" => r"\Leftarrow",
        "<=-" => r"\Leftarrow",
        "<" => "<",
        "<=" => r"\le",
        ">" => ">",
        ">=" => r"\re",
        "||" => r"\|",
        "/" => "/",
        "x" => r"\times",
        "oo" => r"\infty",
        _ => return Err(()),
    }
    .to_string())
}

fn tex_of_maybe_abbreviated_symbol_name(s: &str) -> String {
    format!(
        r"\{}",
        match s {
            "!" => "not",
            _ => s,
        }
    )
}

fn tex_of_maybe_abbreviated_accent_name(s: &str) -> String {
    format!(
        r"\{}",
        match s {
            _ => s,
        }
    )
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_1() {
        assert_eq!(tex_of_char('Œì').unwrap(), r"\Gamma");
    }
}
