use std::iter::once;
use unicode_normalization::{is_nfkc_quick, IsNormalized, UnicodeNormalization};

fn unicode_char_to_tex(c: char) -> Option<String> {
    let shifted_char = |character: char, base: char, ascii_base: char| {
        char::from_u32(u32::from(character) - u32::from(base) + u32::from(ascii_base)).unwrap()
    };
    match c {
        // ASCII
        'A'..='Z'
        | 'a'..='z'
        | '!'
        | ','
        | ';'
        | '?'
        | '@'
        | '*'
        | '+'
        | '-'
        | ':'
        | '<'
        | '='
        | '>'
        | '|' => Some(c.to_string()),
        '$' | '%' | '&' => Some(format!(r"\{}", c)),
        '~' => Some(r"\sim".to_string()),
        // Styled alphabets
        // - Mathematical Bold
        '𝐀'..='𝐙' => Some(format!(r"\mathbf{{ {} }}", shifted_char(c, '𝐀', 'A'))),
        '𝐚'..='𝐳' => Some(format!(r"\mathbf{{ {} }}", shifted_char(c, '𝐚', 'a'))),
        '𝟎'..='𝟗' => Some(format!(r"\mathbf{{ {} }}", shifted_char(c, '𝟎', '0'))),
        // - Mathematical Italic
        '𝐴'..='𝑍' => Some(format!(r"\mathit{{ {} }}", shifted_char(c, '𝐴', 'A'))),
        '𝑎'..='𝑧' => Some(format!(r"\mathit{{ {} }}", shifted_char(c, '𝑎', 'a'))),
        'ℎ' => Some(r"\mathit{ h }".to_string()),
        // - Mathematical Bold Italic
        '𝑨'..='𝒁' => Some(format!(r"\bm{{ {} }}", shifted_char(c, '𝑨', 'A'))),
        '𝒂'..='𝒛' => Some(format!(r"\bm{{ {} }}", shifted_char(c, '𝒂', 'a'))),
        // - Mathematical Script
        '𝒜'..='𝒵' => Some(format!(r"\mathscr{{ {} }}", shifted_char(c, '𝒜', 'A'))),
        '𝒶'..='𝓏' => Some(format!(r"\mathscr{{ {} }}", shifted_char(c, '𝒶', 'a'))),
        'ℬ' => Some(r"\mathscr{ B }".to_string()),
        'ℰ' => Some(r"\mathscr{ E }".to_string()),
        'ℱ' => Some(r"\mathscr{ F }".to_string()),
        'ℋ' => Some(r"\mathscr{ H }".to_string()),
        'ℐ' => Some(r"\mathscr{ I }".to_string()),
        'ℒ' => Some(r"\mathscr{ L }".to_string()),
        'ℳ' => Some(r"\mathscr{ M }".to_string()),
        'ℛ' => Some(r"\mathscr{ R }".to_string()),
        'ℯ' => Some(r"\mathscr{ e }".to_string()),
        'ℊ' => Some(r"\mathscr{ g }".to_string()),
        'ℴ' => Some(r"\mathscr{ o }".to_string()),
        // - Mathematical Bold Script
        '𝓐'..='𝓩' => Some(format!(
            r"\bm{{\mathscr{{ {} }}}}",
            shifted_char(c, '𝓐', 'A')
        )),
        '𝓪'..='𝔃' => Some(format!(
            r"\bm{{\mathscr{{ {} }}}}",
            shifted_char(c, '𝓪', 'a')
        )),
        // - Mathematical Fraktur
        '𝔄'..='𝔜' => Some(format!(r"\mathfrak{{ {} }}", shifted_char(c, '𝔄', 'A'))),
        '𝔞'..='𝔷' => Some(format!(r"\mathfrak{{ {} }}", shifted_char(c, '𝔞', 'a'))),
        'ℭ' => Some(r"\mathfrak{ C }".to_string()),
        'ℌ' => Some(r"\mathfrak{ H }".to_string()),
        'ℑ' => Some(r"\mathfrak{ I }".to_string()),
        'ℜ' => Some(r"\mathfrak{ R }".to_string()),
        'ℨ' => Some(r"\mathfrak{ Z }".to_string()),
        // - Mathematical Double-Struck
        '𝔸'..='𝕐' => Some(format!(r"\mathbb{{ {} }}", shifted_char(c, '𝔸', 'A'))),
        '𝕒'..='𝕫' => Some(format!(r"\mathbb{{ {} }}", shifted_char(c, '𝕒', 'a'))),
        '𝟘'..='𝟡' => Some(format!(r"\mathbb{{ {} }}", shifted_char(c, '𝟘', '0'))),
        'ℂ' => Some(r"\mathbb{ C }".to_string()),
        'ℍ' => Some(r"\mathbb{ H }".to_string()),
        'ℕ' => Some(r"\mathbb{ N }".to_string()),
        'ℙ' => Some(r"\mathbb{ P }".to_string()),
        'ℚ' => Some(r"\mathbb{ Q }".to_string()),
        'ℝ' => Some(r"\mathbb{ R }".to_string()),
        'ℤ' => Some(r"\mathbb{ Z }".to_string()),
        // - Mathematical Bold Fraktur => Mathematical Fraktur
        '𝕬'..='𝖅' => Some(format!(r"\mathfrak{{ {} }}", shifted_char(c, '𝕬', 'A'))),
        '𝖆'..='𝖟' => Some(format!(r"\mathfrak{{ {} }}", shifted_char(c, '𝖆', 'a'))),
        // - Mathematical Sans-Serif
        '𝖠'..='𝖹' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝖠', 'A'))),
        '𝖺'..='𝗓' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝖺', 'a'))),
        '𝟢'..='𝟫' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝟢', '0'))),
        // - Mathematical {Bold,Italic} Sans-Serif => Mathematical Sans-Serif
        '𝗔'..='𝗭' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝗔', 'A'))),
        '𝗮'..='𝘇' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝗮', 'a'))),
        '𝘈'..='𝘡' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝘈', 'A'))),
        '𝘢'..='𝘻' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝘢', 'a'))),
        '𝘼'..='𝙕' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝘼', 'A'))),
        '𝙖'..='𝙯' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝙖', 'a'))),
        '𝟬'..='𝟵' => Some(format!(r"\mathsf{{ {} }}", shifted_char(c, '𝟬', '0'))),
        // - Mathematical Monospace
        '𝙰'..='𝚉' => Some(format!(r"\mathtt{{ {} }}", shifted_char(c, '𝙰', 'A'))),
        '𝚊'..='𝚣' => Some(format!(r"\mathtt{{ {} }}", shifted_char(c, '𝚊', 'a'))),
        '𝟶'..='𝟿' => Some(format!(r"\mathtt{{ {} }}", shifted_char(c, '𝟶', '0'))),
        // Greek alphabets
        'Α' => Some(r"\Alpha".to_string()),
        'Β' => Some(r"\Beta".to_string()),
        'Γ' => Some(r"\Gamma".to_string()),
        'Δ' => Some(r"\Delta".to_string()),
        'Ε' => Some(r"\Epsilon".to_string()),
        'Ζ' => Some(r"\Zeta".to_string()),
        'Η' => Some(r"\Eta".to_string()),
        'Θ' | 'ϴ' => Some(r"\Theta".to_string()),
        'Ι' => Some(r"\Iota".to_string()),
        'Κ' => Some(r"\Kappa".to_string()),
        'Λ' => Some(r"\Lambda".to_string()),
        'Μ' => Some(r"\Mu".to_string()),
        'Ν' => Some(r"\Nu".to_string()),
        'Ξ' => Some(r"\Xi".to_string()),
        'Ο' => Some(r"\Omicron".to_string()),
        'Π' => Some(r"\Pi".to_string()),
        'Ρ' => Some(r"\Rho".to_string()),
        'Σ' => Some(r"\Sigma".to_string()),
        'Τ' => Some(r"\Tau".to_string()),
        'Υ' => Some(r"\Upsilon".to_string()),
        'Φ' => Some(r"\Phi".to_string()),
        'Χ' => Some(r"\Chi".to_string()),
        'Ψ' => Some(r"\Psi".to_string()),
        'Ω' => Some(r"\Omega".to_string()),
        'α' => Some(r"\alpha".to_string()),
        'β' => Some(r"\beta".to_string()),
        'γ' => Some(r"\gamma".to_string()),
        'δ' => Some(r"\delta".to_string()),
        'ε' => Some(r"\varepsilon".to_string()),
        'ζ' => Some(r"\zeta".to_string()),
        'η' => Some(r"\eta".to_string()),
        'θ' => Some(r"\theta".to_string()),
        'ι' => Some(r"\iota".to_string()),
        'κ' => Some(r"\kappa".to_string()),
        'λ' => Some(r"\lambda".to_string()),
        'μ' => Some(r"\mu".to_string()),
        'ν' => Some(r"\nu".to_string()),
        'ξ' => Some(r"\xi".to_string()),
        'ο' => Some(r"\omicron".to_string()),
        'π' => Some(r"\pi".to_string()),
        'ρ' => Some(r"\rho".to_string()),
        'ς' => Some(r"\varsigma".to_string()),
        'σ' => Some(r"\sigma".to_string()),
        'τ' => Some(r"\tau".to_string()),
        'υ' => Some(r"\upsilon".to_string()),
        'φ' => Some(r"\varphi".to_string()),
        'χ' => Some(r"\chi".to_string()),
        'ψ' => Some(r"\psi".to_string()),
        'ω' => Some(r"\omega".to_string()),
        'ϵ' => Some(r"\epsilon".to_string()),
        'ϑ' => Some(r"\vartheta".to_string()),
        'ϰ' => Some(r"\varkappa".to_string()),
        'ϕ' => Some(r"\phi".to_string()),
        'ϱ' => Some(r"\varrho".to_string()),
        'ϖ' => Some(r"\varpi".to_string()),
        'ϝ' => Some(r"\digamma".to_string()),
        // Styled
        '𝛢'..='𝛲' => unicode_char_to_tex(shifted_char(c, '𝛢', 'Α')),
        '𝛳' => Some(r"\Theta".to_string()),
        '𝛴'..='𝛺' => unicode_char_to_tex(shifted_char(c, '𝛴', 'Σ')),
        '𝛼'..='𝜔' => unicode_char_to_tex(shifted_char(c, '𝛼', 'α')),
        '𝜖' => Some(r"\epsilon".to_string()),
        '𝜗' => Some(r"\vartheta".to_string()),
        '𝜘' => Some(r"\varkappa".to_string()),
        '𝜙' => Some(r"\phi".to_string()),
        '𝜚' => Some(r"\varrho".to_string()),
        '𝜛' => Some(r"\varpi".to_string()),
        // - Bold
        '𝚨'..='𝚸' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝚨', 'Α'))?
        )),
        '𝜜'..='𝜬' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝜜', 'Α'))?
        )),
        '𝝖'..='𝝦' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝝖', 'Α'))?
        )),
        '𝞐'..='𝞠' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝞐', 'Α'))?
        )),
        '𝚹' | '𝜭' | '𝝧' | '𝞡' => Some(r"\bm{ \Theta }".to_string()),
        '𝚺'..='𝛀' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝚺', 'Σ'))?
        )),
        '𝜮'..='𝜴' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝜮', 'Σ'))?
        )),
        '𝝨'..='𝝮' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝝨', 'Σ'))?
        )),
        '𝞢'..='𝞨' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝞢', 'Σ'))?
        )),
        '𝛂'..='𝛚' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝛂', 'α'))?
        )),
        '𝜶'..='𝝎' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝜶', 'α'))?
        )),
        '𝝰'..='𝞈' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝝰', 'α'))?
        )),
        '𝞪'..='𝟂' => Some(format!(
            r"\bm{{ {} }}",
            unicode_char_to_tex(shifted_char(c, '𝞪', 'α'))?
        )),
        '𝛜' | '𝝐' | '𝞊' | '𝟄' => Some(r"\bm{ \epsilon }".to_string()),
        '𝛝' | '𝝑' | '𝞋' | '𝟅' => Some(r"\bm{ \vartheta }".to_string()),
        '𝛞' | '𝝒' | '𝞌' | '𝟆' => Some(r"\bm{ \varkappa }".to_string()),
        '𝛟' | '𝝓' | '𝞍' | '𝟇' => Some(r"\bm{ \phi }".to_string()),
        '𝛠' | '𝝔' | '𝞎' | '𝟈' => Some(r"\bm{ \varrho }".to_string()),
        '𝛡' | '𝝕' | '𝞏' | '𝟉' => Some(r"\bm{ \varpi }".to_string()),
        '𝟋' => Some(r"\bm{ \digamma }".to_string()),
        '𝛻' => Some(r"\nabla".to_string()),
        '𝜕' => Some(r"\partial".to_string()),
        '𝛁' | '𝜵' | '𝝯' | '𝞩' => Some(r"\bm{ \nabla }".to_string()),
        '𝛛' | '𝝏' | '𝞉' | '𝟃' => Some(r"\bm{ \partial }".to_string()),
        '𝚤' => Some(r"\imath".to_string()),
        'ı' => Some(r"\text{\i}".to_string()),
        '𝚥' => Some(r"\jmath".to_string()),
        'ȷ' => Some(r"\text{\j}".to_string()),
        '±' => Some(r"\pm".to_string()),
        '×' => Some(r"\times".to_string()),
        'ð' => Some(r"\dh".to_string()),
        '÷' => Some(r"\div".to_string()),
        '†' => Some(r"\dagger".to_string()),
        '‡' => Some(r"\ddagger".to_string()),
        '…' => Some(r"\ldots".to_string()),
        'ħ' => Some(r"\hbar".to_string()),
        'ℏ' => Some(r"\hslash".to_string()),
        'Ⅎ' => Some(r"\Finv".to_string()),
        'ℵ' => Some(r"\aleph".to_string()),
        'ℶ' => Some(r"\beth".to_string()),
        'ℷ' => Some(r"\gimel".to_string()),
        'ℸ' => Some(r"\daleth".to_string()),
        '⅁' => Some(r"\Game".to_string()),
        '←' => Some(r"\leftarrow".to_string()),
        '↑' => Some(r"\uparrow".to_string()),
        '→' => Some(r"\rightarrow".to_string()),
        '↓' => Some(r"\downarrow".to_string()),
        '↔' => Some(r"\leftrightarrow".to_string()),
        '↕' => Some(r"\updownarrow".to_string()),
        '↖' => Some(r"\nwarrow".to_string()),
        '↗' => Some(r"\nearrow".to_string()),
        '↘' => Some(r"\searrow".to_string()),
        '↙' => Some(r"\swarrow".to_string()),
        '↞' => Some(r"\twoheadleftarrow".to_string()),
        '↠' => Some(r"\twoheadrightarrow".to_string()),
        '↢' => Some(r"\leftarrowtail".to_string()),
        '↣' => Some(r"\rightarrowtail".to_string()),
        '↦' => Some(r"\mapsto".to_string()),
        '↩' => Some(r"\hookleftarrow".to_string()),
        '↪' => Some(r"\hookrightarrow".to_string()),
        '↫' => Some(r"\looparrowleft".to_string()),
        '↬' => Some(r"\looparrowright".to_string()),
        '↭' => Some(r"\leftrightsquigarrow".to_string()),
        '↰' => Some(r"\Lsh".to_string()),
        '↱' => Some(r"\Rsh".to_string()),
        '↶' => Some(r"\curvearrowleft".to_string()),
        '↷' => Some(r"\curvearrowright".to_string()),
        '↺' => Some(r"\circlearrowleft".to_string()),
        '↻' => Some(r"\circlearrowright".to_string()),
        '↼' => Some(r"\leftharpoonup".to_string()),
        '↽' => Some(r"\leftharpoondown".to_string()),
        '↾' => Some(r"\upharpoonright".to_string()),
        '↿' => Some(r"\upharpoonleft".to_string()),
        '⇀' => Some(r"\rightharpoonup".to_string()),
        '⇁' => Some(r"\rightharpoondown".to_string()),
        '⇂' => Some(r"\downharpoonright".to_string()),
        '⇃' => Some(r"\downharpoonleft".to_string()),
        '⇄' => Some(r"\rightleftarrows".to_string()),
        '⇆' => Some(r"\leftrightarrows".to_string()),
        '⇇' => Some(r"\leftleftarrows".to_string()),
        '⇈' => Some(r"\upuparrows".to_string()),
        '⇉' => Some(r"\rightrightarrows".to_string()),
        '⇊' => Some(r"\downdownarrows".to_string()),
        '⇋' => Some(r"\leftrightharpoons".to_string()),
        '⇌' => Some(r"\rightleftharpoons".to_string()),
        '⇐' => Some(r"\Leftarrow".to_string()),
        '⇑' => Some(r"\Uparrow".to_string()),
        '⇒' => Some(r"\Rightarrow".to_string()),
        '⇓' => Some(r"\Downarrow".to_string()),
        '⇔' => Some(r"\Leftrightarrow".to_string()),
        '⇕' => Some(r"\Updownarrow".to_string()),
        '⇚' => Some(r"\Lleftarrow".to_string()),
        '⇛' => Some(r"\Rrightarrow".to_string()),
        '⇝' => Some(r"\rightsquigarrow".to_string()),
        '⇠' => Some(r"\leftdasharrow".to_string()),
        '⇢' => Some(r"\rightdasharrow".to_string()),
        '∀' => Some(r"\forall".to_string()),
        '∁' => Some(r"\complement".to_string()),
        '∂' => Some(r"\partial".to_string()),
        '∃' => Some(r"\exists".to_string()),
        '∅' => Some(r"\emptyset".to_string()),
        '∆' => Some(r"\increment".to_string()),
        '∇' => Some(r"\nabla".to_string()),
        '∈' => Some(r"\in".to_string()),
        '∊' => Some(r"\smallin".to_string()),
        '∋' => Some(r"\ni".to_string()),
        '∍' => Some(r"\smallni".to_string()),
        '∎' => Some(r"\QED".to_string()),
        '∏' => Some(r"\prod".to_string()),
        '∐' => Some(r"\coprod".to_string()),
        '∑' => Some(r"\sum".to_string()),
        '−' => Some(r"\minus".to_string()),
        '∓' => Some(r"\mp".to_string()),
        '∔' => Some(r"\dotplus".to_string()),
        '∖' => Some(r"\setminus".to_string()),
        '∗' => Some(r"\ast".to_string()),
        '∘' => Some(r"\circ".to_string()),
        '∙' => Some(r"\vysmblkcircle".to_string()),
        '∝' => Some(r"\propto".to_string()),
        '∞' => Some(r"\infty".to_string()),
        '∟' => Some(r"\rightangle".to_string()),
        '∠' => Some(r"\angle".to_string()),
        '∡' => Some(r"\measuredangle".to_string()),
        '∢' => Some(r"\sphericalangle".to_string()),
        '∣' => Some(r"\mid".to_string()),
        '∥' => Some(r"\parallel".to_string()),
        '∧' => Some(r"\wedge".to_string()),
        '∨' => Some(r"\vee".to_string()),
        '∩' => Some(r"\cap".to_string()),
        '∪' => Some(r"\cup".to_string()),
        '∫' => Some(r"\int".to_string()),
        '∬' => Some(r"\iint".to_string()),
        '∭' => Some(r"\iiint".to_string()),
        '∮' => Some(r"\oint".to_string()),
        '∯' => Some(r"\oiint".to_string()),
        '∰' => Some(r"\oiiint".to_string()),
        '∴' => Some(r"\therefore".to_string()),
        '∵' => Some(r"\because".to_string()),
        '∷' => Some(r"\Colon".to_string()),
        '∸' => Some(r"\dotminus".to_string()),
        '∺' => Some(r"\dotsminusdots".to_string()),
        '∻' => Some(r"\kernelcontraction".to_string()),
        '∼' => Some(r"\sim".to_string()),
        '∽' => Some(r"\backsim".to_string()),
        '≀' => Some(r"\wr".to_string()),
        '≂' => Some(r"\eqsim".to_string()),
        '≃' => Some(r"\simeq".to_string()),
        '≅' => Some(r"\cong".to_string()),
        '≆' => Some(r"\approxnotequal".to_string()),
        '≈' => Some(r"\approx".to_string()),
        '≊' => Some(r"\approxeq".to_string()),
        '≍' => Some(r"\asymp".to_string()),
        '≎' => Some(r"\Bumpeq".to_string()),
        '≏' => Some(r"\bumpeq".to_string()),
        '≐' => Some(r"\doteq".to_string()),
        '≑' => Some(r"\Doteq".to_string()),
        '≒' => Some(r"\fallingdotseq".to_string()),
        '≓' => Some(r"\risingdotseq".to_string()),
        '≔' => Some(r"\coloneq".to_string()),
        '≕' => Some(r"\eqcolon".to_string()),
        '≖' => Some(r"\eqcirc".to_string()),
        '≗' => Some(r"\circeq".to_string()),
        '≘' => Some(r"\arceq".to_string()),
        '≙' => Some(r"\wedgeq".to_string()),
        '≚' => Some(r"\veeeq".to_string()),
        '≛' => Some(r"\starequal".to_string()),
        '≜' => Some(r"\triangleq".to_string()),
        '≝' => Some(r"\eqdef".to_string()),
        '≞' => Some(r"\measeq".to_string()),
        '≟' => Some(r"\questeq".to_string()),
        '≡' => Some(r"\equiv".to_string()),
        '≤' => Some(r"\leq".to_string()),
        '≥' => Some(r"\geq".to_string()),
        '≦' => Some(r"\leqq".to_string()),
        '≧' => Some(r"\geqq".to_string()),
        '≨' => Some(r"\lneqq".to_string()),
        '≩' => Some(r"\gneqq".to_string()),
        '≪' => Some(r"\ll".to_string()),
        '≫' => Some(r"\gg".to_string()),
        '≬' => Some(r"\between".to_string()),
        '≲' => Some(r"\lesssim".to_string()),
        '≳' => Some(r"\gtrsim".to_string()),
        '≶' => Some(r"\lessgtr".to_string()),
        '≷' => Some(r"\gtrless".to_string()),
        '≺' => Some(r"\prec".to_string()),
        '≻' => Some(r"\succ".to_string()),
        '≼' => Some(r"\preccurlyeq".to_string()),
        '≽' => Some(r"\succcurlyeq".to_string()),
        '≾' => Some(r"\precsim".to_string()),
        '≿' => Some(r"\succsim".to_string()),
        '⊂' => Some(r"\subset".to_string()),
        '⊃' => Some(r"\supset".to_string()),
        '⊆' => Some(r"\subseteq".to_string()),
        '⊇' => Some(r"\supseteq".to_string()),
        '⊊' => Some(r"\subsetneq".to_string()),
        '⊋' => Some(r"\supsetneq".to_string()),
        '⊎' => Some(r"\uplus".to_string()),
        '⊏' => Some(r"\sqsubset".to_string()),
        '⊐' => Some(r"\sqsupset".to_string()),
        '⊑' => Some(r"\sqsubseteq".to_string()),
        '⊒' => Some(r"\sqsupseteq".to_string()),
        '⊓' => Some(r"\sqcap".to_string()),
        '⊔' => Some(r"\sqcup".to_string()),
        '⊕' => Some(r"\oplus".to_string()),
        '⊖' => Some(r"\ominus".to_string()),
        '⊗' => Some(r"\otimes".to_string()),
        '⊘' => Some(r"\oslash".to_string()),
        '⊙' => Some(r"\odot".to_string()),
        '⊚' => Some(r"\circledcirc".to_string()),
        '⊛' => Some(r"\circledast".to_string()),
        '⊝' => Some(r"\circleddash".to_string()),
        '⊞' => Some(r"\boxplus".to_string()),
        '⊟' => Some(r"\boxminus".to_string()),
        '⊠' => Some(r"\boxtimes".to_string()),
        '⊡' => Some(r"\boxdot".to_string()),
        '⊢' => Some(r"\vdash".to_string()),
        '⊣' => Some(r"\dashv".to_string()),
        '⊤' => Some(r"\top".to_string()),
        '⊥' => Some(r"\bot".to_string()),
        '⊧' => Some(r"\models".to_string()),
        '⊨' => Some(r"\vDash".to_string()),
        '⊩' => Some(r"\Vdash".to_string()),
        '⊪' => Some(r"\Vvdash".to_string()),
        '⊫' => Some(r"\VDash".to_string()),
        '⊲' => Some(r"\vartriangleleft".to_string()),
        '⊳' => Some(r"\vartriangleright".to_string()),
        '⊴' => Some(r"\trianglelefteq".to_string()),
        '⊵' => Some(r"\trianglerighteq".to_string()),
        '⊶' => Some(r"\original".to_string()),
        '⊷' => Some(r"\image".to_string()),
        '⊸' => Some(r"\multimap".to_string()),
        '⊺' => Some(r"\intercal".to_string()),
        '⊻' => Some(r"\xor".to_string()),
        '⊼' => Some(r"\nand".to_string()),
        '⊽' => Some(r"\nor".to_string()),
        '⋀' => Some(r"\bigwedge".to_string()),
        '⋁' => Some(r"\bigvee".to_string()),
        '⋂' => Some(r"\bigcap".to_string()),
        '⋃' => Some(r"\bigcup".to_string()),
        '⋄' => Some(r"\diamond".to_string()),
        '⋅' => Some(r"\cdot".to_string()),
        '⋆' => Some(r"\star".to_string()),
        '⋇' => Some(r"\divideontimes".to_string()),
        '⋈' => Some(r"\bowtie".to_string()),
        '⋉' => Some(r"\ltimes".to_string()),
        '⋊' => Some(r"\rtimes".to_string()),
        '⋋' => Some(r"\leftthreetimes".to_string()),
        '⋌' => Some(r"\rightthreetimes".to_string()),
        '⋍' => Some(r"\backsimeq".to_string()),
        '⋎' => Some(r"\curlyvee".to_string()),
        '⋏' => Some(r"\curlywedge".to_string()),
        '⋐' => Some(r"\Subset".to_string()),
        '⋑' => Some(r"\Supset".to_string()),
        '⋒' => Some(r"\Cap".to_string()),
        '⋓' => Some(r"\Cup".to_string()),
        '⋔' => Some(r"\pitchfork".to_string()),
        '⋖' => Some(r"\lessdot".to_string()),
        '⋗' => Some(r"\gtrdot".to_string()),
        '⋘' => Some(r"\verymuchless".to_string()),
        '⋙' => Some(r"\ggg".to_string()),
        '⋚' => Some(r"\lesseqgtr".to_string()),
        '⋛' => Some(r"\gtreqless".to_string()),
        '⋜' => Some(r"\eqless".to_string()),
        '⋝' => Some(r"\eqgtr".to_string()),
        '⋞' => Some(r"\curlyeqprec".to_string()),
        '⋟' => Some(r"\curlyeqsucc".to_string()),
        '⋤' => Some(r"\sqsubsetneq".to_string()),
        '⋥' => Some(r"\sqspne".to_string()),
        '⋦' => Some(r"\lnsim".to_string()),
        '⋧' => Some(r"\gnsim".to_string()),
        '⋨' => Some(r"\precnsim".to_string()),
        '⋩' => Some(r"\succnsim".to_string()),
        '⋮' => Some(r"\vdots".to_string()),
        '⋯' => Some(r"\cdots".to_string()),
        '⋰' => Some(r"\adots".to_string()),
        '⋱' => Some(r"\ddots".to_string()),
        '⋲' => Some(r"\disin".to_string()),
        '⋳' => Some(r"\varisins".to_string()),
        '⋴' => Some(r"\isins".to_string()),
        '⋵' => Some(r"\isindot".to_string()),
        '⋶' => Some(r"\varisinobar".to_string()),
        '⋷' => Some(r"\isinobar".to_string()),
        '⋸' => Some(r"\isinvb".to_string()),
        '⋹' => Some(r"\isinE".to_string()),
        '⋺' => Some(r"\nisd".to_string()),
        '⋻' => Some(r"\varnis".to_string()),
        '⋼' => Some(r"\nis".to_string()),
        '⋽' => Some(r"\varniobar".to_string()),
        '⋾' => Some(r"\niobar".to_string()),
        '⋿' => Some(r"\bagmember".to_string()),
        '⌢' => Some(r"\frown".to_string()),
        '⌣' => Some(r"\smile".to_string()),
        '◯' => Some(r"\lgwhtcircle".to_string()),
        '⟵' => Some(r"\longleftarrow".to_string()),
        '⟶' => Some(r"\longrightarrow".to_string()),
        '⟷' => Some(r"\longleftrightarrow".to_string()),
        '⟸' => Some(r"\Longleftarrow".to_string()),
        '⟹' => Some(r"\Longrightarrow".to_string()),
        '⟺' => Some(r"\iff".to_string()),
        '⟼' => Some(r"\longmapsto".to_string()),
        '⨀' => Some(r"\bigodot".to_string()),
        '⨁' => Some(r"\bigoplus".to_string()),
        '⨂' => Some(r"\bigotimes".to_string()),
        '⨄' => Some(r"\biguplus".to_string()),
        '⨆' => Some(r"\bigsqcup".to_string()),
        '⨿' => Some(r"\amalg".to_string()),
        '⩴' => Some(r"\Coloneq".to_string()),
        '⩽' => Some(r"\leqslant".to_string()),
        '⩾' => Some(r"\geqslant".to_string()),
        '⪅' => Some(r"\lessapprox".to_string()),
        '⪆' => Some(r"\gtrapprox".to_string()),
        '⪇' => Some(r"\lneq".to_string()),
        '⪈' => Some(r"\gneq".to_string()),
        '⪉' => Some(r"\lnapprox".to_string()),
        '⪊' => Some(r"\gnapprox".to_string()),
        '⪋' => Some(r"\lesseqqgtr".to_string()),
        '⪌' => Some(r"\gtreqqless".to_string()),
        '⪕' => Some(r"\eqslantless".to_string()),
        '⪖' => Some(r"\eqslantgtr".to_string()),
        '⪯' => Some(r"\preceq".to_string()),
        '⪰' => Some(r"\succeq".to_string()),
        '⪵' => Some(r"\precneqq".to_string()),
        '⪶' => Some(r"\succneqq".to_string()),
        '⪷' => Some(r"\precapprox".to_string()),
        '⪸' => Some(r"\succapprox".to_string()),
        '⪹' => Some(r"\precnapprox".to_string()),
        '⪺' => Some(r"\succnapprox".to_string()),
        '⫅' => Some(r"\subseteqq".to_string()),
        '⫆' => Some(r"\supseteqq".to_string()),
        '⫋' => Some(r"\subsetneqq".to_string()),
        '⫌' => Some(r"\supsetneqq".to_string()),
        // TODO: '∕', '∶', '∹', '⊦'
        _ => match is_nfkc_quick(once(c)) {
            IsNormalized::Yes => None,
            _ => unicode_char_to_tex(once(c).nfkc().next()?),
        },
    }
}

fn unicode_accent_to_tex() -> String {
    "aaa".to_string()
}

fn unicode_sub_to_ascii() -> String {
    "aaa".to_string()
}

fn unicode_sup_to_ascii() -> String {
    "aaa".to_string()
}
fn main() {
    assert_eq!(1, 1);
}
