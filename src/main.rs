use std::{fmt::Display, iter::once};
use unicode_normalization::{is_nfkc_quick, IsNormalized, UnicodeNormalization};

fn unicode_char_to_tex(c: char) -> Option<String> {
    let shift = |character: char, base: char, ascii_base: char| {
        char::from_u32(u32::from(character) - u32::from(base) + u32::from(ascii_base)).unwrap()
    };
    let symbol = |s: &str| Some(format!(r"\{}", s));
    let combine = |op: &str, arg: &dyn Display| Some(format!(r"\{}{{ {} }}", op, arg));
    let combine2 = |op1: &str, op2: &str, arg: &dyn Display| {
        Some(format!(r"\{}{{ \{}{{ {} }} }}", op1, op2, arg))
    };
    match c {
        // - ASCII
        'A'..='Z' | 'a'..='z' => Some(c.to_string()),
        '!' | ',' | ';' | '?' | '@' | '*' | '+' | '-' | ':' | '<' | '=' | '>' | '|' => {
            Some(c.to_string())
        }
        '$' | '%' | '&' => symbol(&c.to_string()),
        '~' => symbol("sim"),

        // - Styled alphabets
        //   - Mathematical Bold
        '𝐀'..='𝐙' => combine("mathbf", &shift(c, '𝐀', 'A')),
        '𝐚'..='𝐳' => combine("mathbf", &shift(c, '𝐚', 'a')),
        '𝟎'..='𝟗' => combine("mathbf", &shift(c, '𝟎', '0')),

        //   - Mathematical Italic
        '𝐴'..='𝑍' => combine("mathit", &shift(c, '𝐴', 'A')),
        '𝑎'..='𝑧' => combine("mathit", &shift(c, '𝑎', 'a')),
        'ℎ' => combine("mathit", &'h'),

        //   - Mathematical Bold Italic
        '𝑨'..='𝒁' => combine("bm", &shift(c, '𝑨', 'A')),
        '𝒂'..='𝒛' => combine("bm", &shift(c, '𝒂', 'a')),

        //   - Mathematical Script
        '𝒜'..='𝒵' => combine("mathscr", &shift(c, '𝒜', 'A')),
        '𝒶'..='𝓏' => combine("mathscr", &shift(c, '𝒶', 'a')),
        'ℬ' => combine("mathscr", &'B'),
        'ℰ' => combine("mathscr", &'E'),
        'ℱ' => combine("mathscr", &'F'),
        'ℋ' => combine("mathscr", &'H'),
        'ℐ' => combine("mathscr", &'I'),
        'ℒ' => combine("mathscr", &'L'),
        'ℳ' => combine("mathscr", &'M'),
        'ℛ' => combine("mathscr", &'R'),
        'ℯ' => combine("mathscr", &'e'),
        'ℊ' => combine("mathscr", &'g'),
        'ℴ' => combine("mathscr", &'o'),

        //   - Mathematical Bold Script
        '𝓐'..='𝓩' => combine2("bm", "mathscr", &shift(c, '𝓐', 'A')),
        '𝓪'..='𝔃' => combine2("bm", "mathscr", &shift(c, '𝓪', 'a')),

        //   - Mathematical Fraktur
        '𝔄'..='𝔜' => combine("mathfrak", &shift(c, '𝔄', 'A')),
        '𝔞'..='𝔷' => combine("mathfrak", &shift(c, '𝔞', 'a')),
        'ℭ' => combine("mathfrak", &'C'),
        'ℌ' => combine("mathfrak", &'H'),
        'ℑ' => combine("mathfrak", &'I'),
        'ℜ' => combine("mathfrak", &'R'),
        'ℨ' => combine("mathfrak", &'Z'),

        //   - Mathematical Double-Struck
        '𝔸'..='𝕐' => combine("mathbb", &shift(c, '𝔸', 'A')),
        '𝕒'..='𝕫' => combine("mathbb", &shift(c, '𝕒', 'a')),
        '𝟘'..='𝟡' => combine("mathbb", &shift(c, '𝟘', '0')),
        'ℂ' => combine("mathbb", &'C'),
        'ℍ' => combine("mathbb", &'H'),
        'ℕ' => combine("mathbb", &'N'),
        'ℙ' => combine("mathbb", &'P'),
        'ℚ' => combine("mathbb", &'Q'),
        'ℝ' => combine("mathbb", &'R'),
        'ℤ' => combine("mathbb", &'Z'),

        //   - Mathematical Bold Fraktur => Mathematical Fraktur
        '𝕬'..='𝖅' => combine("mathfrak", &shift(c, '𝕬', 'A')),
        '𝖆'..='𝖟' => combine("mathfrak", &shift(c, '𝖆', 'a')),

        //   - Mathematical Sans-Serif
        '𝖠'..='𝖹' => combine("mathsf", &shift(c, '𝖠', 'A')),
        '𝖺'..='𝗓' => combine("mathsf", &shift(c, '𝖺', 'a')),
        '𝟢'..='𝟫' => combine("mathsf", &shift(c, '𝟢', '0')),
        '𝗔'..='𝗭' => combine("mathsf", &shift(c, '𝗔', 'A')),
        '𝗮'..='𝘇' => combine("mathsf", &shift(c, '𝗮', 'a')),
        '𝘈'..='𝘡' => combine("mathsf", &shift(c, '𝘈', 'A')),
        '𝘢'..='𝘻' => combine("mathsf", &shift(c, '𝘢', 'a')),
        '𝘼'..='𝙕' => combine("mathsf", &shift(c, '𝘼', 'A')),
        '𝙖'..='𝙯' => combine("mathsf", &shift(c, '𝙖', 'a')),
        '𝟬'..='𝟵' => combine("mathsf", &shift(c, '𝟬', '0')),

        //   - Mathematical Monospace
        '𝙰'..='𝚉' => combine("mathtt", &shift(c, '𝙰', 'A')),
        '𝚊'..='𝚣' => combine("mathtt", &shift(c, '𝚊', 'a')),
        '𝟶'..='𝟿' => combine("mathtt", &shift(c, '𝟶', '0')),

        // - Greek alphabets
        'Α' => symbol("Alpha"),
        'Β' => symbol("Beta"),
        'Γ' => symbol("Gamma"),
        'Δ' => symbol("Delta"),
        'Ε' => symbol("Epsilon"),
        'Ζ' => symbol("Zeta"),
        'Η' => symbol("Eta"),
        'Θ' | 'ϴ' => symbol("Theta"),
        'Ι' => symbol("Iota"),
        'Κ' => symbol("Kappa"),
        'Λ' => symbol("Lambda"),
        'Μ' => symbol("Mu"),
        'Ν' => symbol("Nu"),
        'Ξ' => symbol("Xi"),
        'Ο' => symbol("Omicron"),
        'Π' => symbol("Pi"),
        'Ρ' => symbol("Rho"),
        'Σ' => symbol("Sigma"),
        'Τ' => symbol("Tau"),
        'Υ' => symbol("Upsilon"),
        'Φ' => symbol("Phi"),
        'Χ' => symbol("Chi"),
        'Ψ' => symbol("Psi"),
        'Ω' => symbol("Omega"),
        'α' => symbol("alpha"),
        'β' => symbol("beta"),
        'γ' => symbol("gamma"),
        'δ' => symbol("delta"),
        'ε' => symbol("varepsilon"),
        'ζ' => symbol("zeta"),
        'η' => symbol("eta"),
        'θ' => symbol("theta"),
        'ι' => symbol("iota"),
        'κ' => symbol("kappa"),
        'λ' => symbol("lambda"),
        'μ' => symbol("mu"),
        'ν' => symbol("nu"),
        'ξ' => symbol("xi"),
        'ο' => symbol("omicron"),
        'π' => symbol("pi"),
        'ρ' => symbol("rho"),
        'ς' => symbol("varsigma"),
        'σ' => symbol("sigma"),
        'τ' => symbol("tau"),
        'υ' => symbol("upsilon"),
        'φ' => symbol("varphi"),
        'χ' => symbol("chi"),
        'ψ' => symbol("psi"),
        'ω' => symbol("omega"),
        'ϵ' => symbol("epsilon"),
        'ϑ' => symbol("vartheta"),
        'ϰ' => symbol("varkappa"),
        'ϕ' => symbol("phi"),
        'ϱ' => symbol("varrho"),
        'ϖ' => symbol("varpi"),
        'ϝ' => symbol("digamma"),

        //   - Italic
        '𝛢'..='𝛲' => unicode_char_to_tex(shift(c, '𝛢', 'Α')),
        '𝛳' => symbol("Theta"),
        '𝛴'..='𝛺' => unicode_char_to_tex(shift(c, '𝛴', 'Σ')),
        '𝛼'..='𝜔' => unicode_char_to_tex(shift(c, '𝛼', 'α')),
        '𝜖' => symbol("epsilon"),
        '𝜗' => symbol("vartheta"),
        '𝜘' => symbol("varkappa"),
        '𝜙' => symbol("phi"),
        '𝜚' => symbol("varrho"),
        '𝜛' => symbol("varpi"),

        //   - Bold
        '𝚨'..='𝚸' => combine("bm", &unicode_char_to_tex(shift(c, '𝚨', 'Α'))?),
        '𝜜'..='𝜬' => combine("bm", &unicode_char_to_tex(shift(c, '𝜜', 'Α'))?),
        '𝝖'..='𝝦' => combine("bm", &unicode_char_to_tex(shift(c, '𝝖', 'Α'))?),
        '𝞐'..='𝞠' => combine("bm", &unicode_char_to_tex(shift(c, '𝞐', 'Α'))?),
        '𝚹' | '𝜭' | '𝝧' | '𝞡' => combine("bm", &symbol("Theta")?),
        '𝚺'..='𝛀' => combine("bm", &unicode_char_to_tex(shift(c, '𝚺', 'Σ'))?),
        '𝜮'..='𝜴' => combine("bm", &unicode_char_to_tex(shift(c, '𝜮', 'Σ'))?),
        '𝝨'..='𝝮' => combine("bm", &unicode_char_to_tex(shift(c, '𝝨', 'Σ'))?),
        '𝞢'..='𝞨' => combine("bm", &unicode_char_to_tex(shift(c, '𝞢', 'Σ'))?),
        '𝛂'..='𝛚' => combine("bm", &unicode_char_to_tex(shift(c, '𝛂', 'α'))?),
        '𝜶'..='𝝎' => combine("bm", &unicode_char_to_tex(shift(c, '𝜶', 'α'))?),
        '𝝰'..='𝞈' => combine("bm", &unicode_char_to_tex(shift(c, '𝝰', 'α'))?),
        '𝞪'..='𝟂' => combine("bm", &unicode_char_to_tex(shift(c, '𝞪', 'α'))?),
        '𝛜' | '𝝐' | '𝞊' | '𝟄' => combine("bm", &symbol("epsilon")?),
        '𝛝' | '𝝑' | '𝞋' | '𝟅' => combine("bm", &symbol("vartheta")?),
        '𝛞' | '𝝒' | '𝞌' | '𝟆' => combine("bm", &symbol("varkappa")?),
        '𝛟' | '𝝓' | '𝞍' | '𝟇' => combine("bm", &symbol("phi")?),
        '𝛠' | '𝝔' | '𝞎' | '𝟈' => combine("bm", &symbol("varrho")?),
        '𝛡' | '𝝕' | '𝞏' | '𝟉' => combine("bm", &symbol("varpi")?),
        '𝟋' => combine("bm", &symbol("digamma")?),

        // - Symbols
        '𝛻' => symbol("nabla"),
        '𝜕' => symbol("partial"),
        '𝛁' | '𝜵' | '𝝯' | '𝞩' => combine("bm", &symbol("nabla")?),
        '𝛛' | '𝝏' | '𝞉' | '𝟃' => combine("bm", &symbol("partial")?),
        '𝚤' => symbol("imath"),
        'ı' => combine("text", &symbol("i")?),
        '𝚥' => symbol("jmath"),
        'ȷ' => combine("text", &symbol("j")?),
        '±' => symbol("pm"),
        '×' => symbol("times"),
        '÷' => symbol("div"),
        '†' => symbol("dagger"),
        '‡' => symbol("ddagger"),
        '…' => symbol("ldots"),
        'ħ' => symbol("hbar"),
        'ℏ' => symbol("hslash"),
        'Ⅎ' => symbol("Finv"),
        'ℵ' => symbol("aleph"),
        'ℶ' => symbol("beth"),
        'ℷ' => symbol("gimel"),
        'ℸ' => symbol("daleth"),
        '⅁' => symbol("Game"),
        '←' => symbol("leftarrow"),
        '↑' => symbol("uparrow"),
        '→' => symbol("rightarrow"),
        '↓' => symbol("downarrow"),
        '↔' => symbol("leftrightarrow"),
        '↕' => symbol("updownarrow"),
        '↖' => symbol("nwarrow"),
        '↗' => symbol("nearrow"),
        '↘' => symbol("searrow"),
        '↙' => symbol("swarrow"),
        '↞' => symbol("twoheadleftarrow"),
        '↠' => symbol("twoheadrightarrow"),
        '↢' => symbol("leftarrowtail"),
        '↣' => symbol("rightarrowtail"),
        '↦' => symbol("mapsto"),
        '↩' => symbol("hookleftarrow"),
        '↪' => symbol("hookrightarrow"),
        '↫' => symbol("looparrowleft"),
        '↬' => symbol("looparrowright"),
        '↭' => symbol("leftrightsquigarrow"),
        '↰' => symbol("Lsh"),
        '↱' => symbol("Rsh"),
        '↶' => symbol("curvearrowleft"),
        '↷' => symbol("curvearrowright"),
        '↺' => symbol("circlearrowleft"),
        '↻' => symbol("circlearrowright"),
        '↼' => symbol("leftharpoonup"),
        '↽' => symbol("leftharpoondown"),
        '↾' => symbol("upharpoonright"),
        '↿' => symbol("upharpoonleft"),
        '⇀' => symbol("rightharpoonup"),
        '⇁' => symbol("rightharpoondown"),
        '⇂' => symbol("downharpoonright"),
        '⇃' => symbol("downharpoonleft"),
        '⇄' => symbol("rightleftarrows"),
        '⇆' => symbol("leftrightarrows"),
        '⇇' => symbol("leftleftarrows"),
        '⇈' => symbol("upuparrows"),
        '⇉' => symbol("rightrightarrows"),
        '⇊' => symbol("downdownarrows"),
        '⇋' => symbol("leftrightharpoons"),
        '⇌' => symbol("rightleftharpoons"),
        '⇐' => symbol("Leftarrow"),
        '⇑' => symbol("Uparrow"),
        '⇒' => symbol("Rightarrow"),
        '⇓' => symbol("Downarrow"),
        '⇔' => symbol("Leftrightarrow"),
        '⇕' => symbol("Updownarrow"),
        '⇚' => symbol("Lleftarrow"),
        '⇛' => symbol("Rrightarrow"),
        '⇝' => symbol("rightsquigarrow"),
        '∀' => symbol("forall"),
        '∁' => symbol("complement"),
        '∂' => symbol("partial"),
        '∃' => symbol("exists"),
        '∅' => symbol("empty"),
        '∆' => combine("mathop", &symbol("Delta")?),
        '∇' => symbol("nabla"),
        '∈' => symbol("in"),
        '∊' => symbol("in"),
        '∋' => symbol("ni"),
        '∍' => symbol("ni"),
        '∎' => symbol("blacksquare"),
        '∏' => symbol("prod"),
        '∐' => symbol("coprod"),
        '∑' => symbol("sum"),
        '−' => unicode_char_to_tex('-'),
        '∓' => symbol("mp"),
        '∔' => symbol("dotplus"),
        '∖' => symbol("setminus"),
        '∗' => symbol("ast"),
        '∘' => symbol("circ"),
        '∙' => symbol("cdot"),
        '∝' => symbol("propto"),
        '∞' => symbol("infty"),
        '∠' => symbol("angle"),
        '∡' => symbol("measuredangle"),
        '∢' => symbol("sphericalangle"),
        '∣' => symbol("mid"),
        '∥' => symbol("parallel"),
        '∧' => symbol("wedge"),
        '∨' => symbol("vee"),
        '∩' => symbol("cap"),
        '∪' => symbol("cup"),
        '∫' => symbol("int"),
        '∬' => symbol("iint"),
        '∭' => symbol("iiint"),
        '∮' => symbol("oint"),
        '∯' => symbol("oiint"),
        '∰' => symbol("oiiint"),
        '∴' => symbol("therefore"),
        '∵' => symbol("because"),
        '∷' => symbol("coloncolon"),
        '∼' => symbol("sim"),
        '∽' => symbol("backsim"),
        '≀' => symbol("wr"),
        '≂' => symbol("eqsim"),
        '≃' => symbol("simeq"),
        '≅' => symbol("cong"),
        '≈' => symbol("approx"),
        '≊' => symbol("approxeq"),
        '≍' => symbol("asymp"),
        '≎' => symbol("Bumpeq"),
        '≏' => symbol("bumpeq"),
        '≐' => symbol("doteq"),
        '≑' => symbol("Doteq"),
        '≒' => symbol("fallingdotseq"),
        '≓' => symbol("risingdotseq"),
        '≔' => symbol("coloneq"),
        '≕' => symbol("eqcolon"),
        '≖' => symbol("eqcirc"),
        '≗' => symbol("circeq"),
        '≜' => symbol("triangleq"),
        '≡' => symbol("equiv"),
        '≤' => symbol("leq"),
        '≥' => symbol("geq"),
        '≦' => symbol("leqq"),
        '≧' => symbol("geqq"),
        '≨' => symbol("lneqq"),
        '≩' => symbol("gneqq"),
        '≪' => symbol("ll"),
        '≫' => symbol("gg"),
        '≬' => symbol("between"),
        '≲' => symbol("lesssim"),
        '≳' => symbol("gtrsim"),
        '≶' => symbol("lessgtr"),
        '≷' => symbol("gtrless"),
        '≺' => symbol("prec"),
        '≻' => symbol("succ"),
        '≼' => symbol("preccurlyeq"),
        '≽' => symbol("succcurlyeq"),
        '≾' => symbol("precsim"),
        '≿' => symbol("succsim"),
        '⊂' => symbol("subset"),
        '⊃' => symbol("supset"),
        '⊆' => symbol("subseteq"),
        '⊇' => symbol("supseteq"),
        '⊊' => symbol("subsetneq"),
        '⊋' => symbol("supsetneq"),
        '⊎' => symbol("uplus"),
        '⊏' => symbol("sqsubset"),
        '⊐' => symbol("sqsupset"),
        '⊑' => symbol("sqsubseteq"),
        '⊒' => symbol("sqsupseteq"),
        '⊓' => symbol("sqcap"),
        '⊔' => symbol("sqcup"),
        '⊕' => symbol("oplus"),
        '⊖' => symbol("ominus"),
        '⊗' => symbol("otimes"),
        '⊘' => symbol("oslash"),
        '⊙' => symbol("odot"),
        '⊚' => symbol("circledcirc"),
        '⊛' => symbol("circledast"),
        '⊝' => symbol("circleddash"),
        '⊞' => symbol("boxplus"),
        '⊟' => symbol("boxminus"),
        '⊠' => symbol("boxtimes"),
        '⊡' => symbol("boxdot"),
        '⊢' => symbol("vdash"),
        '⊣' => symbol("dashv"),
        '⊤' => symbol("top"),
        '⊥' => symbol("bot"),
        '⊧' => symbol("models"),
        '⊨' => symbol("vDash"),
        '⊩' => symbol("Vdash"),
        '⊪' => symbol("Vvdash"),
        '⊲' => symbol("vartriangleleft"),
        '⊳' => symbol("vartriangleright"),
        '⊴' => symbol("trianglelefteq"),
        '⊵' => symbol("trianglerighteq"),
        '⊶' => symbol("origof"),
        '⊷' => symbol("image"),
        '⊸' => symbol("multimap"),
        '⊺' => symbol("intercal"),
        '⊻' => symbol("veebar"),
        '⊼' => symbol("barwedge"),
        '⋀' => symbol("bigwedge"),
        '⋁' => symbol("bigvee"),
        '⋂' => symbol("bigcap"),
        '⋃' => symbol("bigcup"),
        '⋄' => symbol("diamond"),
        '⋅' => symbol("cdot"),
        '⋆' => symbol("star"),
        '⋇' => symbol("divideontimes"),
        '⋈' => symbol("bowtie"),
        '⋉' => symbol("ltimes"),
        '⋊' => symbol("rtimes"),
        '⋋' => symbol("leftthreetimes"),
        '⋌' => symbol("rightthreetimes"),
        '⋍' => symbol("backsimeq"),
        '⋎' => symbol("curlyvee"),
        '⋏' => symbol("curlywedge"),
        '⋐' => symbol("Subset"),
        '⋑' => symbol("Supset"),
        '⋒' => symbol("Cap"),
        '⋓' => symbol("Cup"),
        '⋔' => symbol("pitchfork"),
        '⋖' => symbol("lessdot"),
        '⋗' => symbol("gtrdot"),
        '⋘' => symbol("llless"),
        '⋙' => symbol("ggg"),
        '⋚' => symbol("lesseqgtr"),
        '⋛' => symbol("gtreqless"),
        '⋞' => symbol("curlyeqprec"),
        '⋟' => symbol("curlyeqsucc"),
        '⋦' => symbol("lnsim"),
        '⋧' => symbol("gnsim"),
        '⋨' => symbol("precnsim"),
        '⋩' => symbol("succnsim"),
        '⋮' => symbol("vdots"),
        '⋯' => symbol("cdots"),
        '⋱' => symbol("ddots"),
        '⌢' => symbol("frown"),
        '⌣' => symbol("smile"),
        '◯' => symbol("bigcirc"),
        '⟵' => symbol("longleftarrow"),
        '⟶' => symbol("longrightarrow"),
        '⟷' => symbol("longleftrightarrow"),
        '⟸' => symbol("Longleftarrow"),
        '⟹' => symbol("Longrightarrow"),
        '⟺' => symbol("iff"),
        '⟼' => symbol("longmapsto"),
        '⨀' => symbol("bigodot"),
        '⨁' => symbol("bigoplus"),
        '⨂' => symbol("bigotimes"),
        '⨄' => symbol("biguplus"),
        '⨆' => symbol("bigsqcup"),
        '⨿' => symbol("amalg"),
        '⩴' => symbol("Coloneq"),
        '⩽' => symbol("leqslant"),
        '⩾' => symbol("geqslant"),
        '⪅' => symbol("lessapprox"),
        '⪆' => symbol("gtrapprox"),
        '⪇' => symbol("lneq"),
        '⪈' => symbol("gneq"),
        '⪉' => symbol("lnapprox"),
        '⪊' => symbol("gnapprox"),
        '⪋' => symbol("lesseqqgtr"),
        '⪌' => symbol("gtreqqless"),
        '⪕' => symbol("eqslantless"),
        '⪖' => symbol("eqslantgtr"),
        '⪯' => symbol("preceq"),
        '⪰' => symbol("succeq"),
        '⪵' => symbol("precneqq"),
        '⪶' => symbol("succneqq"),
        '⪷' => symbol("precapprox"),
        '⪸' => symbol("succapprox"),
        '⪹' => symbol("precnapprox"),
        '⪺' => symbol("succnapprox"),
        '⫅' => symbol("subseteqq"),
        '⫆' => symbol("supseteqq"),
        '⫋' => symbol("subsetneqq"),
        '⫌' => symbol("supsetneqq"),

        '∸' => Some(r"\dot{ - }".to_string()),
        '≆' => Some(r"\mathrel{ \widetilde{ \ne } }".to_string()),
        '≘' => Some(r"\stackrel{ \frown }{ = }".to_string()),
        '≙' => Some(r"\stackrel{ \wedge }{ = }".to_string()),
        '≚' => Some(r"\stackrel{ \vee }{ = }".to_string()),
        '≛' => Some(r"\stackrel{ \star }{ = }".to_string()),
        '≝' => Some(r"\stackrel{ \mathrm{def} }{ = }".to_string()),
        '≞' => Some(r"\stackrel{ \mathrm{m} }{ = }".to_string()),
        '≟' => Some(r"\stackrel{ ? }{ = }".to_string()),
        '⊽' => combine("bar", &symbol("vee")?),
        '⋵' => Some(r"\dot{ \in }".to_string()),
        '⋶' | '⋷' => Some(r"\bar{ \in }".to_string()),
        '⋸' => Some(r"\underline{ \in }".to_string()),
        '⋽' | '⋾' => Some(r"\bar{ \ni }".to_string()),

        //   - unsupported
        'ð' | '⇠' | '⇢' | '∟' | '∺' | '∻' | '⊫' | '⋜' | '⋝' | '⋤' | '⋥' | '⋰' | '⋲' | '⋳' | '⋴'
        | '⋹' | '⋺' | '⋻' | '⋼' | '⋿' => None,

        // TODO: '∶', '∹', '⊦'
        _ => match is_nfkc_quick(once(c)) {
            IsNormalized::Yes => None,
            _ => unicode_char_to_tex(once(c).nfkc().next()?),
        },
    }
}

fn unicode_accent_to_tex() -> String {
    "aaa".to_string()
}

fn unicode_sub_to_ascii() -> String {
    "aaa".to_string()
}

fn unicode_sup_to_ascii() -> String {
    "aaa".to_string()
}
fn main() {
    assert_eq!(1, 1);
}
